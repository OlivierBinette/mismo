{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mismo","text":"<p>Mismo is a python framework for Record Linkage, built on top of Ibis. It allows you to deduplicate and link records from tables that don't have a unique identifier.</p> <ul> <li>Take a database of campaign contributions and determine which   were made by the same person</li> <li>Determining which product listings actually refer to the same item.</li> <li>Linking businesses across different datasets.</li> </ul>"},{"location":"#example","title":"Example","text":"<p>See the example notebook.</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Concepts<ul> <li>Goals and Alternatives</li> <li>Fellegi-Sunter Model</li> <li>Versioning Policy</li> </ul> </li> <li>Examples<ul> <li>Patent Deduplication</li> </ul> </li> <li>Reference<ul> <li>Cleaning</li> <li>Blocking</li> <li>Comparing</li> <li>Fellegi-Sunter</li> <li>Clustering</li> <li>Metrics</li> <li>Plotting</li> <li>Datasets</li> </ul> </li> <li>Contribute</li> </ul>"},{"location":"contributing/","title":"How to contribute","text":""},{"location":"contributing/#dependencies","title":"Dependencies","text":"<p>We use <code>PDM</code> as our package and dependency management tool. Install that  per <code>PDM</code>'s instructions.  On Mac/Linux, this is done by running: <pre><code>curl -sSL https://pdm-project.org/install-pdm.py | python3 -\n</code></pre></p> <p>We use <code>just</code> and a  justfile  to automate many of the common development tasks. The rest of this guide will assume you have just installed. If you don't want to use <code>just</code>, you can manually run recipes from the  justfile.</p>"},{"location":"contributing/#setup-dev-environemnt","title":"Setup dev environemnt","text":"<p>Once <code>PDM</code> (and optionally <code>just</code>) are installed, run <code>just init</code>. This will create a virtual environment in <code>.venv/</code>, install all the locked dependencies in <code>pdm.lock</code>.</p> <p>To enter the venv, use <code>. .venv/bin/activate</code>. You can exit the venv with <code>deactivate</code>, as usual.</p> <p>When you are in the venv, you can run common tasks such as - <code>just test</code> - <code>just fmt</code> - <code>just lint</code></p> <p>See the justfile for more recipes.</p>"},{"location":"concepts/fs/","title":"Fellegi-Sunter Model","text":"<p>The Fellegi-Sunter model is a linear model commonly used for record linkage. It uses bayesian statistics to assign odds to different levels of agreement for different dimensions. For example, \"if two names are exactly the same, that makes the odds of a match 7.6 times more likely\". The dimension is \"name\" and the level of agreement is \"exactly the same\". You then combine the multiple dimensions (\"name\", \"location\", \"price\", etc) together to get a final odds for a record pair. You can train the weights using labeled data, or from unlabeled data with an EM (Expectation Maximization) Algorithm.</p> <p>This is the model used by Splink, and I am trying to copy that over to Mismo.</p>"},{"location":"concepts/fs/#glossary","title":"Glossary","text":""},{"location":"concepts/fs/#odds","title":"Odds","text":"<p>Odds of 4 mean that an event is four times more likely to happen than not happen. I other words, it happens four out of five times. Odds of 1/4 or .25 is the opposite: it is 4 times more likely to not happen than happen. Odds of 1 means that happening and not happening are equally likely.</p> <p>Odds can be combined via multiplication, assuming the events are independent. For example, if you draw two records at random, say the odds of the first name matching are 1/10_000, and the gender matching is 1/2. Therefore, the combined odds that the first name matches AND the gender matches is <code>1/10_000 * 1/2 = 1/20_000</code>.</p> <p>In Splink and other contexts, they use the term \"Bayes Factor\" to mean the same thing as \"odds\". I use \"odds\" because it is shorter, and I think more intuitive to people who don't know bayesian statistics. It's not that complicated and \"odds\" is precise enough.</p>"},{"location":"concepts/fs/#log-odds","title":"Log Odds","text":"<p>The logarithm (base 10) of <code>Odds</code>. This is useful because it allows match weights to be added together rather than being multiplied (as Odds are). This is useful so we can visualize comparisons between records using a waterfall chart.</p> <p>For example, with the odds of 100 and 1/10, if we combined these two, we would get a total odds of <code>100 * (1/10) = 1/10</code>. If we instead combined them using log odds: The individual log odds would be 2 and -1, and the combined match weight would be <code>2 + (-1) = 1</code>, which corresponds to a <code>Log Odds</code> of 1, as expected.</p> <p>Here is a table to help you get a sense between these two:</p> Odds Log Odds 0 -inf ... ... .01 -2 .1 -1 1 0 10 1 100 2 ... ... inf inf <p>In Splink and other contexts, they use the term \"Match Weight\" to mean \"Log Odds\". They also use log base 2, but I chose to use log base 10 because I think it is easier to convert back and forth.</p>"},{"location":"concepts/fs/#m-probabilities","title":"M probabilities","text":"<p>Amongst record comparisons which are true matches, what proportion have a match on first name, and what proportion mismatch on first name?</p> <p>This is a measure of how often mispellings, nicknames or aliases occur in the first name field.</p>"},{"location":"concepts/fs/#u-probabilities","title":"U probabilities","text":"<p>Amongst record comparisons which are true non-matches, what proportion have a match on first name, and what proportion mismatch on first name?</p> <p>This is a measure of how likely 'collisions' are likely to occur. For instance, it would be common for two different people to have the same gender, but less likely for two different people to have the same date of birth.</p>"},{"location":"concepts/goals_and_alternatives/","title":"Goals and Alternatives","text":"<ul> <li>Small, composable components that are easy to understand and extend.</li> <li>Use standard data structures like Ibis tables whenever possible.</li> <li>Use pure functions and immutable data structures whenever possible.</li> <li>Have some built-in algorithms such as a splink-inspired Fellegi-Sunter   model so you can get going out of the box, but also leave the door open   for others to plug in their own blocking, comparing, and clustering   algorithms. If we desgin the interfaces between all these stages carefully,   then they should all inter-operate and individual components can be swapped   out for better/custom implementations. Ideally this could position mismo   as the de-facto experimental platform, similar to how huggingface and pytorch   are the standard platforms for machine learning.   platform for researchers. </li> <li>Use duck typing/Protocols to allow users to plug in their own components.</li> <li>Wrap the core logic in helper classes to make it easy to get started, but   have these be shortcuts instead of dead ends.</li> <li>Reproducible results using <code>random_state</code> similar to sklearn. No peer of Mismo   seems to do this.</li> <li>Ergonomic model persistence.</li> <li>Python-first approach. Instead of configuring using JSON, the majority of   the implementation logic should be in python. This prevents dead ends and makes   things much more extendable.</li> </ul>"},{"location":"concepts/goals_and_alternatives/#alternatives-to-mismo","title":"Alternatives to Mismo","text":"<p>A useful way of describing Mismo is to compare it to other record linkage packages, and what I was trying to do differently.</p>"},{"location":"concepts/goals_and_alternatives/#dedupe","title":"Dedupe","text":"<p>Dedupe is pure python, Mismo uses SQL. Thus, Dedupe is able to implement some very complex algorithms that would be difficult to implement in SQL. However, Mismo is much much faster than Dedupe, and can handle much larger datasets.</p> <p>Dedupe is very opinionated, and therefore it is hard to extend. Once you give it your data, it does everything for you, and it is hard to insert your own steps in the middle. Mismo is more like a library of building blocks that you can compose together however you want.</p> <p>I find that Dedupe's way of saving/loading models was clunky and brittle. I wanted to make this more ergonomic.</p>"},{"location":"concepts/goals_and_alternatives/#splink","title":"Splink","text":"<p>Splink is a great package, and I learned a lot from it. That is one of the main sources of inspiration for Mismo.</p> <p>Like Mismo, Splink uses SQL. However, Splink uses raw SQL, whereas Mismo uses Ibis. I think the strongly typed, pythonic API of Ibis makes it much easier for you, as the user of Mismo, to write and maintain code than raw SQL. It also makes it much easier for me, as the maintainer of Mismo, to write the algorithms and tests.</p> <p>Splink only supports a small number of backends at the time of this wriing, but Ibis, and therefore Mismo, supports many more.</p> <p>Splink is very opinionated like Dedupe, and suffers from the same problems.</p> <p>I like how Splink persists model state in a plain json file, but I wish it would just store the learned weights in there. The parameters that don't change between runs, such as what comparisons to use, should be implemented in python to give you the most flexibility. I tried to do this in Mismo.</p>"},{"location":"concepts/goals_and_alternatives/#record-linkage-toolkit","title":"Record Linkage Toolkit","text":"<p>I really like how RLTK is more of a library than a framework. RLTK is more like sklearn, in the sense that it is a collection of tools that you can combine how you want. I wanted to emulate this. But in addition, I wanted to add a framework layer on top of this, so you could have an easy to get going and opinionated solution like Dedupe and Splink.</p> <p>RLTK uses pandas and numpy, so it suffers scaling limitations, because you can't work with data that is going to be larger than memory.</p> <p>I liked how the data structures RLTK expects/returns from its APIs were all standard stuff like pandas dataframes and numpy arrays. I tried to copy this as much as possible, and the result is that Mismo uses vanilla Ibis tables whenever possible.</p> <p>I didn't like how RLTK was so object oriented. It seems like you have to create an object to perform most tasks. These objects are also mutable, which makes it hard to keep track of their state. Whenever possible, I tried to use pure functions and immutable data structuress.</p>"},{"location":"concepts/goals_and_alternatives/#dblink","title":"DBLink","text":"<p>Bayesian, unsupervised record linkage on structured data using Apache Spark.</p> <p>Maybe a bit more academic and not production ready. Development has ceased. Has some interesting algorithms and ideas on how to do things.</p>"},{"location":"concepts/versioning/","title":"Versioning, Support, and Deprecation Policy","text":"<p>Mismo is currently in alpha and breaking changes may happen at any time. In the future, we will follow the ideas outlines below:</p> <p>Mismo considers everything documented in these docs to be part of the public API. If it's not in the docs, breaking changes may happen at any time.</p> <p>Mismo follows NEP29 for python version support.</p>"},{"location":"examples/patent_deduplication/","title":"Patent Deduplication","text":"In\u00a0[1]: Copied! <pre>from __future__ import annotations\n\nimport ibis\nfrom ibis import _\nimport ibis.expr.types as it\n\nibis.options.interactive = True\n</pre> from __future__ import annotations  import ibis from ibis import _ import ibis.expr.types as it  ibis.options.interactive = True <p>We are going to dedupe the PATSTAT dataset. Every record represents a patent filed, and our task is to determine which one came from the same inventor. The end goal is to add a column called <code>inventor_id</code> to each patent. This dataset contains a ground truth label, so we can evaluate how well we did.</p> <p><code>Mismo</code> contains this as an included dataset so it is easy to get started. The returned dataset is an Ibis table, which is a lazy representation of a SQL table. It is similar to a pandas dataframe, but has a few properties that make it much better for the record linkage use case:</p> <ul> <li>Since it is SQL backed, it can handle datasets that are larger than memory, in the many millions of rows.</li> <li>Computation is performed by the powerful SQL backend of your choice: Google BigQuery, Apache Spark, Snowflake, etc. For this demo, we use DuckDB, which is a state-of-the-art SQL engine based around a columnar data model (ie oriented towards the bulk operations of record linkage)</li> <li>Ibis is strongly typed, has a full API, is well-documented, and has good integration with the rest of the python data science ecosystem.</li> </ul> In\u00a0[2]: Copied! <pre>from mismo.datasets import load_patents  # noqa: E402\n\npatents = load_patents()\nprint(patents.count())\npatents\n</pre> from mismo.datasets import load_patents  # noqa: E402  patents = load_patents() print(patents.count()) patents <pre></pre> <pre>2379\n</pre> Out[2]: <pre>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 record_id \u2503 label_true \u2503 name_true            \u2503 name                         \u2503 latitude \u2503 longitude \u2503 coauthors                                                                        \u2503 classes                                                          \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 int64     \u2502 int64      \u2502 string               \u2502 string                       \u2502 float64  \u2502 float64   \u2502 string                                                                           \u2502 string                                                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      2909 \u2502     402600 \u2502 AGILENT TECHNOLOGIES \u2502 * AGILENT TECHNOLOGIES, INC. \u2502     0.00 \u2502  0.000000 \u2502 KONINK PHILIPS ELECTRONICS N V**DAVID E  SNYDER**THOMAS D  LYSTER                \u2502 A61N**A61B                                                       \u2502\n\u2502      3574 \u2502     569309 \u2502 AKZO NOBEL           \u2502 * AKZO NOBEL N.V.            \u2502     0.00 \u2502  0.000000 \u2502 TSJERK  HOEKSTRA**ANDRESS K  JOHNSON**TERESA MARIE  CHERON**ALBERTO  SLIKTA**JA\u2026 \u2502 G01N**B01L**C11D**G02F**F16L                                     \u2502\n\u2502      3575 \u2502     569309 \u2502 AKZO NOBEL           \u2502 * AKZO NOBEL NV              \u2502     0.00 \u2502  0.000000 \u2502 WILLIAM JOHN ERNEST  PARR**HANS  OSKARSSON**MARTIN  HELLSTEN**KORNELIS  OVERKEM\u2026 \u2502 C09K**F17D**B01F**C23F                                           \u2502\n\u2502      3779 \u2502     656303 \u2502 ALCATEL              \u2502 * ALCATEL N.V.               \u2502    52.35 \u2502  4.916667 \u2502 GUENTER  KOCHSMEIER**ZBIGNIEW  WIEGOLASKI**EVAN JOHN  STANBURY**PETER GRANT  JE\u2026 \u2502 G02B**G04G**H02G**G06F                                           \u2502\n\u2502      3780 \u2502     656303 \u2502 ALCATEL              \u2502 * ALCATEL N.V.               \u2502    52.35 \u2502  4.916667 \u2502 ZILAN  MANFRED**JOSIANE  RAMOS**DUANE LYNN  MORTENSEN**CHRISTIAN  LE SERGENT     \u2502 H03G**B05D**H04L**H04B**C03B**C03C**G02B**H01B                   \u2502\n\u2502      3782 \u2502     656303 \u2502 ALCATEL              \u2502 * ALCATEL N.V.               \u2502     0.00 \u2502  0.000000 \u2502 OLIVIER  AUDOUIN**MICHEL  SOTOM**JEAN MICHEL  GABRIAGUES                         \u2502 H04B**H01S**H04J                                                 \u2502\n\u2502     15041 \u2502    4333661 \u2502 CANON EUROPA         \u2502 * CANON EUROPA N.V           \u2502     0.00 \u2502  0.000000 \u2502 LEE  RICKLER**SIMON  PARKER**CANON RES CENT EURO **RAKEFET  SAGMAN**TIMOTHY FRA\u2026 \u2502 G06F                                                             \u2502\n\u2502     15042 \u2502    4333661 \u2502 CANON EUROPA         \u2502 * CANON EUROPA N.V.          \u2502     0.00 \u2502  0.000000 \u2502 QI HE  HONG**ADAM MICHAEL  BAUMBERG**ALEXANDER RALPH  LYONS                      \u2502 G06T**G01B                                                       \u2502\n\u2502     15043 \u2502    4333661 \u2502 CANON EUROPA         \u2502 * CANON EUROPA NV            \u2502     0.00 \u2502  0.000000 \u2502 NILESH  PATHAK**MASAMICHI  MASUDA** CANON TECHNOLOGY EURO **PATRICK WILLIAM  MO\u2026 \u2502 H04B**G06T**G06F**H04M**H04N**H04Q**G03B**B41J**G01B**G06Q       \u2502\n\u2502     25387 \u2502    7650783 \u2502 DSM                  \u2502 * DSM N.V.                   \u2502     0.00 \u2502  0.000000 \u2502 GABRIEL MARINUS  MEESTERS**RUDOLF CAROLUS  BARENDSE**ARIE KARST  KIES**ALEXANDE\u2026 \u2502 C12N**A61K**A23L**A23J**A23K**A01H**B01J**C12R**C07D**A61P**B01D \u2502\n\u2502         \u2026 \u2502          \u2026 \u2502 \u2026                    \u2502 \u2026                            \u2502        \u2026 \u2502         \u2026 \u2502 \u2026                                                                                \u2502 \u2026                                                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> In\u00a0[3]: Copied! <pre>from mismo.plot import distribution_dashboard  # noqa: E402\n\ndistribution_dashboard(patents, column=\"name\")\n</pre> from mismo.plot import distribution_dashboard  # noqa: E402  distribution_dashboard(patents, column=\"name\")  Cannot show widget. You probably want to rerun the code cell above (Click in the code cell, and press Shift+Enter \u21e7+\u21a9).  <p>Let's clean this up a bit:</p> <ul> <li>clean up whitespace</li> <li>convert the <code>classes</code> column to actual arrays (they really represent sets). Each element in <code>classes</code> is a 4-character IPC technical code that is like a tag for the patent. Similar patents will have similar tags.</li> <li>convert <code>coauthors</code> into a sorted list of tokens.</li> </ul> <p>Of course, this sort of cleaning only happens after a lot of exploring the data manually. This isn't anything in particular to record linkage, but this needs to happen for any sort of data analysis.</p> In\u00a0[4]: Copied! <pre>from mismo.clean import norm_whitespace  # noqa: E402\n\n\ndef clean_names(names: it.StringValue) -&gt; it.StringValue:\n    names = norm_whitespace(names)\n    names = names.upper()\n    # Only want to keep letters, numbers, and spaces\n    names = names.re_replace(\"[^0-9A-Z ]\", \"\")\n    # Some company names have \"NV\" or \"BV\" in them, which is a Dutch\n    # classification of businesses sort of like LLC vs Corporation in the US.\n    # These seem to just be noise and don't help us distinguish between\n    # different companies, so we want to remove them.\n    # However, sometimes the names are ill-formed or have other junk in them\n    # like \"philipsN V\" or \"philipsN.V.\"\n    names = names.re_replace(r\"B\\s*V\", \"\")\n    names = names.re_replace(r\"N\\s*V\", \"\")\n    # Also remove other common stopwords that usually just add noise\n    names = names.re_replace(r\"\\bCO\\b\", \"\")\n    names = names.re_replace(r\"\\bCORP\\b\", \"\")\n    names = names.re_replace(r\"\\bLTD\\b\", \"\")\n    names = names.re_replace(r\"\\bINC\\b\", \"\")\n    names = names.re_replace(r\"\\bLLC\\b\", \"\")\n    names = names.re_replace(r\"\\bNL\\b\", \"\")\n    # Now have to do whitespace fixup again\n    names = norm_whitespace(names)\n    return names\n\n\ndef clean_coauthors(s: it.StringValue) -&gt; it.ArrayValue:\n    \"\"\"Turn a 'list' of coauthors into a sorted array of cleaned name tokens.\n\n    The raw string looks like:\n    \"DAVID E  SNYDER**THOMAS D  LYSTER\"\n    With \"**\" as the separator. However, entire names are not always useful\n    to differentiate between people: there are some records where a coauthor is\n    listed as \"ALKEMA DUURT PIETER WILLEM\" and another as \"ALKEMA DUURT\".\n    These are probably the same person, but if we compared entire names with each other\n    that would be a false negative. So instead we turn this into a sorted array of\n    name tokens, eg for the example above:\n    [\"DAVID\", \"E\", \"SNYDER\", \"THOMAS\", \"D\", \"LYSTER\"].\n\n    Except we also want to remove initials and other stopwords like \"VAN\"\n    so scrub all tokens less than 3 characters long.\n    \"\"\"\n    s = s.upper().nullif(\"NONE\").replace(\"**\", \" \")\n    s = norm_whitespace(s)\n    return s.split(\" \").unique().sort().filter(lambda x: x.length() &gt;= 3)\n\n\ndef clean_classes(s: it.StringValue) -&gt; it.ArrayValue:\n    return s.upper().split(\"**\").map(norm_whitespace).sort()\n\n\ncleaned = patents.select(\n    \"record_id\",\n    \"label_true\",\n    \"name_true\",\n    \"name\",\n    name_cleaned=clean_names(patents.name),\n    latitude=_.latitude.nullif(0),\n    longitude=_.longitude.nullif(0),\n    coauthors=clean_coauthors(patents.coauthors),\n    classes=clean_classes(patents.classes),\n)\n</pre> from mismo.clean import norm_whitespace  # noqa: E402   def clean_names(names: it.StringValue) -&gt; it.StringValue:     names = norm_whitespace(names)     names = names.upper()     # Only want to keep letters, numbers, and spaces     names = names.re_replace(\"[^0-9A-Z ]\", \"\")     # Some company names have \"NV\" or \"BV\" in them, which is a Dutch     # classification of businesses sort of like LLC vs Corporation in the US.     # These seem to just be noise and don't help us distinguish between     # different companies, so we want to remove them.     # However, sometimes the names are ill-formed or have other junk in them     # like \"philipsN V\" or \"philipsN.V.\"     names = names.re_replace(r\"B\\s*V\", \"\")     names = names.re_replace(r\"N\\s*V\", \"\")     # Also remove other common stopwords that usually just add noise     names = names.re_replace(r\"\\bCO\\b\", \"\")     names = names.re_replace(r\"\\bCORP\\b\", \"\")     names = names.re_replace(r\"\\bLTD\\b\", \"\")     names = names.re_replace(r\"\\bINC\\b\", \"\")     names = names.re_replace(r\"\\bLLC\\b\", \"\")     names = names.re_replace(r\"\\bNL\\b\", \"\")     # Now have to do whitespace fixup again     names = norm_whitespace(names)     return names   def clean_coauthors(s: it.StringValue) -&gt; it.ArrayValue:     \"\"\"Turn a 'list' of coauthors into a sorted array of cleaned name tokens.      The raw string looks like:     \"DAVID E  SNYDER**THOMAS D  LYSTER\"     With \"**\" as the separator. However, entire names are not always useful     to differentiate between people: there are some records where a coauthor is     listed as \"ALKEMA DUURT PIETER WILLEM\" and another as \"ALKEMA DUURT\".     These are probably the same person, but if we compared entire names with each other     that would be a false negative. So instead we turn this into a sorted array of     name tokens, eg for the example above:     [\"DAVID\", \"E\", \"SNYDER\", \"THOMAS\", \"D\", \"LYSTER\"].      Except we also want to remove initials and other stopwords like \"VAN\"     so scrub all tokens less than 3 characters long.     \"\"\"     s = s.upper().nullif(\"NONE\").replace(\"**\", \" \")     s = norm_whitespace(s)     return s.split(\" \").unique().sort().filter(lambda x: x.length() &gt;= 3)   def clean_classes(s: it.StringValue) -&gt; it.ArrayValue:     return s.upper().split(\"**\").map(norm_whitespace).sort()   cleaned = patents.select(     \"record_id\",     \"label_true\",     \"name_true\",     \"name\",     name_cleaned=clean_names(patents.name),     latitude=_.latitude.nullif(0),     longitude=_.longitude.nullif(0),     coauthors=clean_coauthors(patents.coauthors),     classes=clean_classes(patents.classes), ) <p>Then, let's add some features. The binned coordinates will be used in the blocking step, so that locations in the same lat/lng bin will be compared to each other.</p> <p>We also generate some features based on the <code>name</code> column.</p> In\u00a0[5]: Copied! <pre>def bin_lat_lon(lat: it.FloatingValue, lon: it.FloatingValue) -&gt; it.StructValue:\n    \"\"\"Bin a latitude or longitude to 0.1 degree precision, which is ~6 miles.\n\n    If both are null, return null.\n\n    (52.35, 4.916667 -&gt; (524, 49)\n    \"\"\"\n\n    def _bin_coord(coord: it.FloatingValue) -&gt; it.IntegerValue:\n        return (coord.round(1) * 10).cast(\"int16\").fillna(0)\n\n    result = ibis.struct(\n        {\n            \"lat_hash\": _bin_coord(lat),\n            \"lon_hash\": _bin_coord(lon),\n        }\n    )\n    both_null = lat.isnull() &amp; lon.isnull()\n    return both_null.ifelse(ibis.null(), result)\n\n\nfeatured = cleaned.mutate(\n    name_tokens=cleaned.name_cleaned.split(\" \").map(norm_whitespace).sort(),\n    name_first3=_.name_cleaned[0:3],\n    coords_hashed=bin_lat_lon(_.latitude, _.longitude),\n)\nfeatured\n</pre> def bin_lat_lon(lat: it.FloatingValue, lon: it.FloatingValue) -&gt; it.StructValue:     \"\"\"Bin a latitude or longitude to 0.1 degree precision, which is ~6 miles.      If both are null, return null.      (52.35, 4.916667 -&gt; (524, 49)     \"\"\"      def _bin_coord(coord: it.FloatingValue) -&gt; it.IntegerValue:         return (coord.round(1) * 10).cast(\"int16\").fillna(0)      result = ibis.struct(         {             \"lat_hash\": _bin_coord(lat),             \"lon_hash\": _bin_coord(lon),         }     )     both_null = lat.isnull() &amp; lon.isnull()     return both_null.ifelse(ibis.null(), result)   featured = cleaned.mutate(     name_tokens=cleaned.name_cleaned.split(\" \").map(norm_whitespace).sort(),     name_first3=_.name_cleaned[0:3],     coords_hashed=bin_lat_lon(_.latitude, _.longitude), ) featured Out[5]: <pre>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 record_id \u2503 label_true \u2503 name_true            \u2503 name                         \u2503 name_cleaned         \u2503 latitude \u2503 longitude \u2503 coauthors                         \u2503 classes                  \u2503 name_tokens                 \u2503 name_first3 \u2503 coords_hashed                            \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 int64     \u2502 int64      \u2502 string               \u2502 string                       \u2502 string               \u2502 float64  \u2502 float64   \u2502 array&lt;string&gt;                     \u2502 array&lt;string&gt;            \u2502 array&lt;string&gt;               \u2502 string      \u2502 struct&lt;lat_hash: int16, lon_hash: int16&gt; \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      2909 \u2502     402600 \u2502 AGILENT TECHNOLOGIES \u2502 * AGILENT TECHNOLOGIES, INC. \u2502 AGILENT TECHNOLOGIES \u2502     NULL \u2502      NULL \u2502 ['DAVID', 'ELECTRONICS', ... +5]  \u2502 ['A61B', 'A61N']         \u2502 ['AGILENT', 'TECHNOLOGIES'] \u2502 AGI         \u2502 NULL                                     \u2502\n\u2502      3574 \u2502     569309 \u2502 AKZO NOBEL           \u2502 * AKZO NOBEL N.V.            \u2502 AKZO NOBEL           \u2502     NULL \u2502      NULL \u2502 ['ALBERT', 'ALBERTO', ... +31]    \u2502 ['B01L', 'C11D', ... +3] \u2502 ['AKZO', 'NOBEL']           \u2502 AKZ         \u2502 NULL                                     \u2502\n\u2502      3575 \u2502     569309 \u2502 AKZO NOBEL           \u2502 * AKZO NOBEL NV              \u2502 AKZO NOBEL           \u2502     NULL \u2502      NULL \u2502 ['CHRISTINA', 'ERNEST', ... +11]  \u2502 ['B01F', 'C09K', ... +2] \u2502 ['AKZO', 'NOBEL']           \u2502 AKZ         \u2502 NULL                                     \u2502\n\u2502      3779 \u2502     656303 \u2502 ALCATEL              \u2502 * ALCATEL N.V.               \u2502 ALCATEL              \u2502    52.35 \u2502  4.916667 \u2502 ['EVAN', 'GRANT', ... +8]         \u2502 ['G02B', 'G04G', ... +2] \u2502 ['ALCATEL']                 \u2502 ALC         \u2502 {'lat_hash': 524, 'lon_hash': 49}        \u2502\n\u2502      3780 \u2502     656303 \u2502 ALCATEL              \u2502 * ALCATEL N.V.               \u2502 ALCATEL              \u2502    52.35 \u2502  4.916667 \u2502 ['CHRISTIAN', 'DUANE', ... +7]    \u2502 ['B05D', 'C03B', ... +6] \u2502 ['ALCATEL']                 \u2502 ALC         \u2502 {'lat_hash': 524, 'lon_hash': 49}        \u2502\n\u2502      3782 \u2502     656303 \u2502 ALCATEL              \u2502 * ALCATEL N.V.               \u2502 ALCATEL              \u2502     NULL \u2502      NULL \u2502 ['AUDOUIN', 'GABRIAGUES', ... +4] \u2502 ['H01S', 'H04B', ... +1] \u2502 ['ALCATEL']                 \u2502 ALC         \u2502 NULL                                     \u2502\n\u2502     15041 \u2502    4333661 \u2502 CANON EUROPA         \u2502 * CANON EUROPA N.V           \u2502 CANON EUROPA         \u2502     NULL \u2502      NULL \u2502 ['CANON', 'CENT', ... +11]        \u2502 ['G06F']                 \u2502 ['CANON', 'EUROPA']         \u2502 CAN         \u2502 NULL                                     \u2502\n\u2502     15042 \u2502    4333661 \u2502 CANON EUROPA         \u2502 * CANON EUROPA N.V.          \u2502 CANON EUROPA         \u2502     NULL \u2502      NULL \u2502 ['ADAM', 'ALEXANDER', ... +5]     \u2502 ['G01B', 'G06T']         \u2502 ['CANON', 'EUROPA']         \u2502 CAN         \u2502 NULL                                     \u2502\n\u2502     15043 \u2502    4333661 \u2502 CANON EUROPA         \u2502 * CANON EUROPA NV            \u2502 CANON EUROPA         \u2502     NULL \u2502      NULL \u2502 ['BARRY', 'BROCARD', ... +24]     \u2502 ['B41J', 'G01B', ... +8] \u2502 ['CANON', 'EUROPA']         \u2502 CAN         \u2502 NULL                                     \u2502\n\u2502     25387 \u2502    7650783 \u2502 DSM                  \u2502 * DSM N.V.                   \u2502 DSM                  \u2502     NULL \u2502      NULL \u2502 ['ALEXANDER', 'ANDELA', ... +39]  \u2502 ['A01H', 'A23J', ... +9] \u2502 ['DSM']                     \u2502 DSM         \u2502 NULL                                     \u2502\n\u2502         \u2026 \u2502          \u2026 \u2502 \u2026                    \u2502 \u2026                            \u2502 \u2026                    \u2502        \u2026 \u2502         \u2026 \u2502 \u2026                                 \u2502 \u2026                        \u2502 \u2026                           \u2502 \u2026           \u2502 \u2026                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <p>OK, now it's time to block! This is where we generate comparisons between records. If we were naive and generated all possible comparisons from N record, you would end up with N^2 comparisons. For our small dataset of ~2000 records we would be able to get away with this, but for datasets much larger than this it would be infeasible.</p> In\u00a0[6]: Copied! <pre>from mismo.block import BlockingRule, BlockingRules  # noqa: E402\n\nrules = BlockingRules(\n    BlockingRule(\"Coordinates Close\", \"coords_hashed\"),\n    BlockingRule(\"Name First 3\", \"name_first3\"),\n    BlockingRule(\"Coauthors Exact\", \"coauthors\"),\n    BlockingRule(\"Classes Exact\", \"classes\"),\n)\n\nfeatured = featured.cache()\nblocked = rules.block(featured, featured, labels=True)\nblocked = blocked.cache()\nblocked\n</pre> from mismo.block import BlockingRule, BlockingRules  # noqa: E402  rules = BlockingRules(     BlockingRule(\"Coordinates Close\", \"coords_hashed\"),     BlockingRule(\"Name First 3\", \"name_first3\"),     BlockingRule(\"Coauthors Exact\", \"coauthors\"),     BlockingRule(\"Classes Exact\", \"classes\"), )  featured = featured.cache() blocked = rules.block(featured, featured, labels=True) blocked = blocked.cache() blocked <pre>FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))</pre> Out[6]: <pre>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 record_id_l \u2503 record_id_r \u2503 blocking_rules                               \u2503 classes_l                \u2503 classes_r                \u2503 coauthors_l              \u2503 coauthors_r              \u2503 coords_hashed_l                          \u2503 coords_hashed_r                          \u2503 label_true_l \u2503 label_true_r \u2503 latitude_l \u2503 latitude_r \u2503 longitude_l \u2503 longitude_r \u2503 name_cleaned_l                   \u2503 name_cleaned_r                   \u2503 name_first3_l \u2503 name_first3_r \u2503 name_l                                   \u2503 name_r                                   \u2503 name_tokens_l                          \u2503 name_tokens_r                          \u2503 name_true_l                 \u2503 name_true_r                 \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 int64       \u2502 int64       \u2502 array&lt;string&gt;                                \u2502 array&lt;string&gt;            \u2502 array&lt;string&gt;            \u2502 array&lt;string&gt;            \u2502 array&lt;string&gt;            \u2502 struct&lt;lat_hash: int16, lon_hash: int16&gt; \u2502 struct&lt;lat_hash: int16, lon_hash: int16&gt; \u2502 int64        \u2502 int64        \u2502 float64    \u2502 float64    \u2502 float64     \u2502 float64     \u2502 string                           \u2502 string                           \u2502 string        \u2502 string        \u2502 string                                   \u2502 string                                   \u2502 array&lt;string&gt;                          \u2502 array&lt;string&gt;                          \u2502 string                      \u2502 string                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    26827037 \u2502    26827037 \u2502 ['Coauthors Exact', 'Classes Exact', ... +1] \u2502 ['H01J']                 \u2502 ['H01J']                 \u2502 ['BOHLANDER']            \u2502 ['BOHLANDER']            \u2502 NULL                                     \u2502 NULL                                     \u2502     26842439 \u2502     26842439 \u2502       NULL \u2502       NULL \u2502        NULL \u2502        NULL \u2502 PHILIPS                          \u2502 PHILIPS                          \u2502 PHI           \u2502 PHI           \u2502 PHILIPS NV                               \u2502 PHILIPS NV                               \u2502 ['PHILIPS']                            \u2502 ['PHILIPS']                            \u2502 PHILIPS                     \u2502 PHILIPS                     \u2502\n\u2502      856660 \u2502      856660 \u2502 ['Coauthors Exact', 'Classes Exact', ... +1] \u2502 ['B03C']                 \u2502 ['B03C']                 \u2502 ['PERSSON', 'TORSTEN']   \u2502 ['PERSSON', 'TORSTEN']   \u2502 NULL                                     \u2502 NULL                                     \u2502       848003 \u2502       848003 \u2502       NULL \u2502       NULL \u2502        NULL \u2502        NULL \u2502 ALSTOM                           \u2502 ALSTOM                           \u2502 ALS           \u2502 ALS           \u2502 ALSTOM NV                                \u2502 ALSTOM NV                                \u2502 ['ALSTOM']                             \u2502 ['ALSTOM']                             \u2502 ALSTOM                      \u2502 ALSTOM                      \u2502\n\u2502     9066395 \u2502     9066395 \u2502 ['Coauthors Exact', 'Classes Exact', ... +1] \u2502 ['B65B']                 \u2502 ['B65B']                 \u2502 ['HENK', 'VLAAM']        \u2502 ['HENK', 'VLAAM']        \u2502 NULL                                     \u2502 NULL                                     \u2502      9076863 \u2502      9076863 \u2502       NULL \u2502       NULL \u2502        NULL \u2502        NULL \u2502 FERAG AG                         \u2502 FERAG AG                         \u2502 FER           \u2502 FER           \u2502 FERAG AG                                 \u2502 FERAG AG                                 \u2502 ['AG', 'FERAG']                        \u2502 ['AG', 'FERAG']                        \u2502 FERAG                       \u2502 FERAG                       \u2502\n\u2502    18321305 \u2502    18321305 \u2502 ['Coauthors Exact', 'Classes Exact', ... +1] \u2502 ['H04B', 'H04M', ... +1] \u2502 ['H04B', 'H04M', ... +1] \u2502 ['DECKROEY', 'SANUIL']   \u2502 ['DECKROEY', 'SANUIL']   \u2502 NULL                                     \u2502 NULL                                     \u2502     26842439 \u2502     26842439 \u2502       NULL \u2502       NULL \u2502        NULL \u2502        NULL \u2502 KONINKLIJKE PHILIPS ELECTRONIC   \u2502 KONINKLIJKE PHILIPS ELECTRONIC   \u2502 KON           \u2502 KON           \u2502 KONINKLIJKE PHILIPS ELECTRONIC CO., LTD. \u2502 KONINKLIJKE PHILIPS ELECTRONIC CO., LTD. \u2502 ['ELECTRONIC', 'KONINKLIJKE', ... +1]  \u2502 ['ELECTRONIC', 'KONINKLIJKE', ... +1]  \u2502 ELECTRONIC KONINK PHILIPS   \u2502 ELECTRONIC KONINK PHILIPS   \u2502\n\u2502    18321363 \u2502    18321363 \u2502 ['Coauthors Exact', 'Classes Exact', ... +1] \u2502 ['A61B', 'G01S', ... +1] \u2502 ['A61B', 'G01S', ... +1] \u2502 ['NING', 'XIANG']        \u2502 ['NING', 'XIANG']        \u2502 NULL                                     \u2502 NULL                                     \u2502     26842439 \u2502     26842439 \u2502       NULL \u2502       NULL \u2502        NULL \u2502        NULL \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KON           \u2502 KON           \u2502 Koninklijke Philips Electronics          \u2502 Koninklijke Philips Electronics          \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ELECTRONICS KONINK PHILIPS  \u2502 ELECTRONICS KONINK PHILIPS  \u2502\n\u2502    18321400 \u2502    18321400 \u2502 ['Coauthors Exact', 'Classes Exact', ... +2] \u2502 ['A47J', 'B65D']         \u2502 ['A47J', 'B65D']         \u2502 ['JOEKE', 'NOORDHUIS']   \u2502 ['JOEKE', 'NOORDHUIS']   \u2502 {'lat_hash': 525, 'lon_hash': 58}        \u2502 {'lat_hash': 525, 'lon_hash': 58}        \u2502     26842439 \u2502     26842439 \u2502      52.50 \u2502      52.50 \u2502    5.750000 \u2502    5.750000 \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KON           \u2502 KON           \u2502 Koninklijke Philips Electronics N. V.    \u2502 Koninklijke Philips Electronics N. V.    \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ELECTRONICS KONINK PHILIPS  \u2502 ELECTRONICS KONINK PHILIPS  \u2502\n\u2502    18321511 \u2502    18321511 \u2502 ['Coauthors Exact', 'Classes Exact', ... +2] \u2502 ['H04L']                 \u2502 ['H04L']                 \u2502 ['ROSENKRANZ', 'WERNER'] \u2502 ['ROSENKRANZ', 'WERNER'] \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502     26842439 \u2502     26842439 \u2502      51.45 \u2502      51.45 \u2502    5.466667 \u2502    5.466667 \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KON           \u2502 KON           \u2502 KONINKLIJKE PHILIPS ELECTRONICS N.V.     \u2502 KONINKLIJKE PHILIPS ELECTRONICS N.V.     \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ELECTRONICS KONINK PHILIPS  \u2502 ELECTRONICS KONINK PHILIPS  \u2502\n\u2502    18321838 \u2502    18321838 \u2502 ['Coauthors Exact', 'Classes Exact', ... +2] \u2502 ['A61B', 'G09G']         \u2502 ['A61B', 'G09G']         \u2502 ['EDWARD', 'PARNAGIAN']  \u2502 ['EDWARD', 'PARNAGIAN']  \u2502 {'lat_hash': 525, 'lon_hash': 58}        \u2502 {'lat_hash': 525, 'lon_hash': 58}        \u2502     26842439 \u2502     26842439 \u2502      52.50 \u2502      52.50 \u2502    5.750000 \u2502    5.750000 \u2502 KONINKLIJKE PHILLIPS ELECTRONICS \u2502 KONINKLIJKE PHILLIPS ELECTRONICS \u2502 KON           \u2502 KON           \u2502 Koninklijke Phillips Electronics N.V.    \u2502 Koninklijke Phillips Electronics N.V.    \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ELECTRONICS KONINK PHILLIPS \u2502 ELECTRONICS KONINK PHILLIPS \u2502\n\u2502    18321856 \u2502    18321856 \u2502 ['Coauthors Exact', 'Classes Exact', ... +2] \u2502 ['H01L']                 \u2502 ['H01L']                 \u2502 ['CHAPMAN', 'JEFFREY']   \u2502 ['CHAPMAN', 'JEFFREY']   \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502     26842439 \u2502     26842439 \u2502      51.45 \u2502      51.45 \u2502    5.466667 \u2502    5.466667 \u2502 KONINKLIJKE PHILPS ELECTRONICS   \u2502 KONINKLIJKE PHILPS ELECTRONICS   \u2502 KON           \u2502 KON           \u2502 Koninklijke Philps Electronics N. V.     \u2502 Koninklijke Philps Electronics N. V.     \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ELECTRONICS KONINK PHILPS   \u2502 ELECTRONICS KONINK PHILPS   \u2502\n\u2502    25033057 \u2502    25033057 \u2502 ['Coauthors Exact', 'Classes Exact', ... +2] \u2502 ['G11B']                 \u2502 ['G11B']                 \u2502 ['NORBERT', 'VOLLMANN']  \u2502 ['NORBERT', 'VOLLMANN']  \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502     26842439 \u2502     26842439 \u2502      51.45 \u2502      51.45 \u2502    5.466667 \u2502    5.466667 \u2502 PHILIPS GLOEILAMPENFABRIEKEN     \u2502 PHILIPS GLOEILAMPENFABRIEKEN     \u2502 PHI           \u2502 PHI           \u2502 N.V. PHILIPS' GLOEILAMPENFABRIEKEN       \u2502 N.V. PHILIPS' GLOEILAMPENFABRIEKEN       \u2502 ['GLOEILAMPENFABRIEKEN', 'PHILIPS']    \u2502 ['GLOEILAMPENFABRIEKEN', 'PHILIPS']    \u2502 GLOEILAMPENFAB PHILIPS      \u2502 GLOEILAMPENFAB PHILIPS      \u2502\n\u2502           \u2026 \u2502           \u2026 \u2502 \u2026                                            \u2502 \u2026                        \u2502 \u2026                        \u2502 \u2026                        \u2502 \u2026                        \u2502 \u2026                                        \u2502 \u2026                                        \u2502            \u2026 \u2502            \u2026 \u2502          \u2026 \u2502          \u2026 \u2502           \u2026 \u2502           \u2026 \u2502 \u2026                                \u2502 \u2026                                \u2502 \u2026             \u2502 \u2026             \u2502 \u2026                                        \u2502 \u2026                                        \u2502 \u2026                                      \u2502 \u2026                                      \u2502 \u2026                           \u2502 \u2026                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <p>The result of that was the two tables joined together, with a <code>_l</code> added to all the columns from the left table, and a <code>_r</code> added to all the columns from the right table. In addition, there is a column <code>blocking_rules</code> that tells us which blocking rules were used to generate the pair.</p> <p>By blocking, we reduced the number of needed pairs by a large factor. In larger datasets, and with better blocking rules, this would be even more!</p> In\u00a0[7]: Copied! <pre>from mismo import metrics  # noqa: E402\n\nn_comparisons = blocked.count().execute()\nn_naive = metrics.n_naive_comparisons(featured)\nreduction_ratio = n_comparisons / n_naive\nn_naive, n_comparisons, reduction_ratio\n</pre> from mismo import metrics  # noqa: E402  n_comparisons = blocked.count().execute() n_naive = metrics.n_naive_comparisons(featured) reduction_ratio = n_comparisons / n_naive n_naive, n_comparisons, reduction_ratio Out[7]: <pre>(2828631, 643357, 0.22744465432217917)</pre> <p>We can also inspect which blocking rules were most to blame for the generated pairs. If some rules generate a huge amount of comparisons, it might be worth trying to make them more restrictive so we get better performance. Or, if some blocking rules aren't generating any comparisons, that might be an indication that we have a bug in there somewhere.</p> In\u00a0[8]: Copied! <pre>from mismo.block import upset_plot  # noqa: E402\n\nupset_plot(blocked)\n</pre> from mismo.block import upset_plot  # noqa: E402  upset_plot(blocked) Out[8]: <p>OK, now that we have our candidate pairs generated, let's actually do the comparing of pairs. There are many ways to do this, but one of the most common is to generate a set of Comparison objects, each of which represents a measurement of similarity based on some dimension (eg \"location\", \"name\", \"price\", etc). Each Comparison is composed of Levels, which represent discrete levels of aggreement (eg \"exactly\", \"within 100km\", \"one or both values null\", etc)</p> In\u00a0[9]: Copied! <pre>from mismo.compare import (  # noqa: E402\n    Comparison,\n    ComparisonLevel,\n    Comparisons,\n    distance_km,\n    jaccard,\n)\n\nname_comparison = Comparison(\n    name=\"Name\",\n    levels=[\n        ComparisonLevel(\"exact\", _.name_cleaned_l == _.name_cleaned_r),\n        ComparisonLevel(\n            \"share 1 token\",\n            condition=_.name_tokens_l.intersect(_.name_tokens_r).length() == 1,\n        ),\n        ComparisonLevel(\n            \"share 2+ tokens\",\n            condition=_.name_tokens_l.intersect(_.name_tokens_r).length() &gt;= 2,\n        ),\n    ],\n)\n\nclasses_comparison = Comparison(\n    name=\"Classes\",\n    levels=[\n        ComparisonLevel(\"exact\", _.classes_l == _.classes_r),\n        ComparisonLevel(\n            name=\"share 1 class\",\n            condition=_.classes_l.intersect(_.classes_r).length() == 1,\n        ),\n        ComparisonLevel(\n            name=\"share 2+ classes\",\n            condition=_.classes_l.intersect(_.classes_r).length() &gt;= 2,\n        ),\n    ],\n)\n\ncoauthors_comparison = Comparison(\n    name=\"Coauthors\",\n    levels=[\n        # ComparisonLevel(\"exact\", _.coauthors_l == _.coauthors_r),\n        ComparisonLevel(\n            name=\"jaccard &gt;= 0.5\",\n            condition=jaccard(_.coauthors_l, _.coauthors_r) &gt;= 0.5,\n        ),\n        ComparisonLevel(\n            name=\"jaccard &gt;= 0.25\",\n            condition=jaccard(_.coauthors_l, _.coauthors_r) &gt;= 0.25,\n        ),\n        ComparisonLevel(\n            name=\"jaccard &gt;= 0.1\",\n            condition=jaccard(_.coauthors_l, _.coauthors_r) &gt;= 0.1,\n        ),\n        ComparisonLevel(\n            name=\"jaccard &gt;= 0.02\",\n            condition=jaccard(_.coauthors_l, _.coauthors_r) &gt;= 0.02,\n        ),\n    ],\n)\n\ncoords_comparison = Comparison(\n    name=\"Coords\",\n    levels=[\n        ComparisonLevel(\n            name=\"exact\",\n            condition=(_.latitude_l == _.latitude_r) &amp; (_.longitude_l == _.longitude_r),\n        ),\n        ComparisonLevel(\n            name=\"coords &lt;= 10km\",\n            condition=distance_km(\n                lat1=_.latitude_l,\n                lon1=_.longitude_l,\n                lat2=_.latitude_r,\n                lon2=_.longitude_r,\n            )\n            &lt;= 10,\n        ),\n        ComparisonLevel(\n            name=\"coords &lt;= 100km\",\n            condition=distance_km(\n                lat1=_.latitude_l,\n                lon1=_.longitude_l,\n                lat2=_.latitude_r,\n                lon2=_.longitude_r,\n            )\n            &lt;= 100,\n        ),\n        ComparisonLevel(\n            name=\"both coord missing\",\n            condition=_.coords_hashed_l.isnull() &amp; _.coords_hashed_r.isnull(),\n        ),\n        ComparisonLevel(\n            name=\"one coord missing\",\n            condition=_.coords_hashed_l.isnull() | _.coords_hashed_r.isnull(),\n        ),\n    ],\n)\n\ncomparisons = Comparisons(\n    [\n        name_comparison,\n        classes_comparison,\n        coauthors_comparison,\n        coords_comparison,\n    ]\n)\ncompared = comparisons.label_pairs(blocked)\ncompared = compared.cache()\ncompared\n</pre> from mismo.compare import (  # noqa: E402     Comparison,     ComparisonLevel,     Comparisons,     distance_km,     jaccard, )  name_comparison = Comparison(     name=\"Name\",     levels=[         ComparisonLevel(\"exact\", _.name_cleaned_l == _.name_cleaned_r),         ComparisonLevel(             \"share 1 token\",             condition=_.name_tokens_l.intersect(_.name_tokens_r).length() == 1,         ),         ComparisonLevel(             \"share 2+ tokens\",             condition=_.name_tokens_l.intersect(_.name_tokens_r).length() &gt;= 2,         ),     ], )  classes_comparison = Comparison(     name=\"Classes\",     levels=[         ComparisonLevel(\"exact\", _.classes_l == _.classes_r),         ComparisonLevel(             name=\"share 1 class\",             condition=_.classes_l.intersect(_.classes_r).length() == 1,         ),         ComparisonLevel(             name=\"share 2+ classes\",             condition=_.classes_l.intersect(_.classes_r).length() &gt;= 2,         ),     ], )  coauthors_comparison = Comparison(     name=\"Coauthors\",     levels=[         # ComparisonLevel(\"exact\", _.coauthors_l == _.coauthors_r),         ComparisonLevel(             name=\"jaccard &gt;= 0.5\",             condition=jaccard(_.coauthors_l, _.coauthors_r) &gt;= 0.5,         ),         ComparisonLevel(             name=\"jaccard &gt;= 0.25\",             condition=jaccard(_.coauthors_l, _.coauthors_r) &gt;= 0.25,         ),         ComparisonLevel(             name=\"jaccard &gt;= 0.1\",             condition=jaccard(_.coauthors_l, _.coauthors_r) &gt;= 0.1,         ),         ComparisonLevel(             name=\"jaccard &gt;= 0.02\",             condition=jaccard(_.coauthors_l, _.coauthors_r) &gt;= 0.02,         ),     ], )  coords_comparison = Comparison(     name=\"Coords\",     levels=[         ComparisonLevel(             name=\"exact\",             condition=(_.latitude_l == _.latitude_r) &amp; (_.longitude_l == _.longitude_r),         ),         ComparisonLevel(             name=\"coords &lt;= 10km\",             condition=distance_km(                 lat1=_.latitude_l,                 lon1=_.longitude_l,                 lat2=_.latitude_r,                 lon2=_.longitude_r,             )             &lt;= 10,         ),         ComparisonLevel(             name=\"coords &lt;= 100km\",             condition=distance_km(                 lat1=_.latitude_l,                 lon1=_.longitude_l,                 lat2=_.latitude_r,                 lon2=_.longitude_r,             )             &lt;= 100,         ),         ComparisonLevel(             name=\"both coord missing\",             condition=_.coords_hashed_l.isnull() &amp; _.coords_hashed_r.isnull(),         ),         ComparisonLevel(             name=\"one coord missing\",             condition=_.coords_hashed_l.isnull() | _.coords_hashed_r.isnull(),         ),     ], )  comparisons = Comparisons(     [         name_comparison,         classes_comparison,         coauthors_comparison,         coords_comparison,     ] ) compared = comparisons.label_pairs(blocked) compared = compared.cache() compared <pre>FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))</pre> Out[9]: <pre>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 record_id_l \u2503 record_id_r \u2503 Name   \u2503 Classes \u2503 Coauthors      \u2503 Coords             \u2503 blocking_rules                               \u2503 classes_l                \u2503 classes_r                \u2503 coauthors_l              \u2503 coauthors_r              \u2503 coords_hashed_l                          \u2503 coords_hashed_r                          \u2503 label_true_l \u2503 label_true_r \u2503 latitude_l \u2503 latitude_r \u2503 longitude_l \u2503 longitude_r \u2503 name_cleaned_l                   \u2503 name_cleaned_r                   \u2503 name_first3_l \u2503 name_first3_r \u2503 name_l                                   \u2503 name_r                                   \u2503 name_tokens_l                          \u2503 name_tokens_r                          \u2503 name_true_l                 \u2503 name_true_r                 \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 int64       \u2502 int64       \u2502 string \u2502 string  \u2502 string         \u2502 string             \u2502 array&lt;string&gt;                                \u2502 array&lt;string&gt;            \u2502 array&lt;string&gt;            \u2502 array&lt;string&gt;            \u2502 array&lt;string&gt;            \u2502 struct&lt;lat_hash: int16, lon_hash: int16&gt; \u2502 struct&lt;lat_hash: int16, lon_hash: int16&gt; \u2502 int64        \u2502 int64        \u2502 float64    \u2502 float64    \u2502 float64     \u2502 float64     \u2502 string                           \u2502 string                           \u2502 string        \u2502 string        \u2502 string                                   \u2502 string                                   \u2502 array&lt;string&gt;                          \u2502 array&lt;string&gt;                          \u2502 string                      \u2502 string                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    26827037 \u2502    26827037 \u2502 exact  \u2502 exact   \u2502 jaccard &gt;= 0.5 \u2502 both coord missing \u2502 ['Coauthors Exact', 'Classes Exact', ... +1] \u2502 ['H01J']                 \u2502 ['H01J']                 \u2502 ['BOHLANDER']            \u2502 ['BOHLANDER']            \u2502 NULL                                     \u2502 NULL                                     \u2502     26842439 \u2502     26842439 \u2502       NULL \u2502       NULL \u2502        NULL \u2502        NULL \u2502 PHILIPS                          \u2502 PHILIPS                          \u2502 PHI           \u2502 PHI           \u2502 PHILIPS NV                               \u2502 PHILIPS NV                               \u2502 ['PHILIPS']                            \u2502 ['PHILIPS']                            \u2502 PHILIPS                     \u2502 PHILIPS                     \u2502\n\u2502      856660 \u2502      856660 \u2502 exact  \u2502 exact   \u2502 jaccard &gt;= 0.5 \u2502 both coord missing \u2502 ['Coauthors Exact', 'Classes Exact', ... +1] \u2502 ['B03C']                 \u2502 ['B03C']                 \u2502 ['PERSSON', 'TORSTEN']   \u2502 ['PERSSON', 'TORSTEN']   \u2502 NULL                                     \u2502 NULL                                     \u2502       848003 \u2502       848003 \u2502       NULL \u2502       NULL \u2502        NULL \u2502        NULL \u2502 ALSTOM                           \u2502 ALSTOM                           \u2502 ALS           \u2502 ALS           \u2502 ALSTOM NV                                \u2502 ALSTOM NV                                \u2502 ['ALSTOM']                             \u2502 ['ALSTOM']                             \u2502 ALSTOM                      \u2502 ALSTOM                      \u2502\n\u2502     9066395 \u2502     9066395 \u2502 exact  \u2502 exact   \u2502 jaccard &gt;= 0.5 \u2502 both coord missing \u2502 ['Coauthors Exact', 'Classes Exact', ... +1] \u2502 ['B65B']                 \u2502 ['B65B']                 \u2502 ['HENK', 'VLAAM']        \u2502 ['HENK', 'VLAAM']        \u2502 NULL                                     \u2502 NULL                                     \u2502      9076863 \u2502      9076863 \u2502       NULL \u2502       NULL \u2502        NULL \u2502        NULL \u2502 FERAG AG                         \u2502 FERAG AG                         \u2502 FER           \u2502 FER           \u2502 FERAG AG                                 \u2502 FERAG AG                                 \u2502 ['AG', 'FERAG']                        \u2502 ['AG', 'FERAG']                        \u2502 FERAG                       \u2502 FERAG                       \u2502\n\u2502    18321305 \u2502    18321305 \u2502 exact  \u2502 exact   \u2502 jaccard &gt;= 0.5 \u2502 both coord missing \u2502 ['Coauthors Exact', 'Classes Exact', ... +1] \u2502 ['H04B', 'H04M', ... +1] \u2502 ['H04B', 'H04M', ... +1] \u2502 ['DECKROEY', 'SANUIL']   \u2502 ['DECKROEY', 'SANUIL']   \u2502 NULL                                     \u2502 NULL                                     \u2502     26842439 \u2502     26842439 \u2502       NULL \u2502       NULL \u2502        NULL \u2502        NULL \u2502 KONINKLIJKE PHILIPS ELECTRONIC   \u2502 KONINKLIJKE PHILIPS ELECTRONIC   \u2502 KON           \u2502 KON           \u2502 KONINKLIJKE PHILIPS ELECTRONIC CO., LTD. \u2502 KONINKLIJKE PHILIPS ELECTRONIC CO., LTD. \u2502 ['ELECTRONIC', 'KONINKLIJKE', ... +1]  \u2502 ['ELECTRONIC', 'KONINKLIJKE', ... +1]  \u2502 ELECTRONIC KONINK PHILIPS   \u2502 ELECTRONIC KONINK PHILIPS   \u2502\n\u2502    18321363 \u2502    18321363 \u2502 exact  \u2502 exact   \u2502 jaccard &gt;= 0.5 \u2502 both coord missing \u2502 ['Coauthors Exact', 'Classes Exact', ... +1] \u2502 ['A61B', 'G01S', ... +1] \u2502 ['A61B', 'G01S', ... +1] \u2502 ['NING', 'XIANG']        \u2502 ['NING', 'XIANG']        \u2502 NULL                                     \u2502 NULL                                     \u2502     26842439 \u2502     26842439 \u2502       NULL \u2502       NULL \u2502        NULL \u2502        NULL \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KON           \u2502 KON           \u2502 Koninklijke Philips Electronics          \u2502 Koninklijke Philips Electronics          \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ELECTRONICS KONINK PHILIPS  \u2502 ELECTRONICS KONINK PHILIPS  \u2502\n\u2502    18321400 \u2502    18321400 \u2502 exact  \u2502 exact   \u2502 jaccard &gt;= 0.5 \u2502 exact              \u2502 ['Coauthors Exact', 'Classes Exact', ... +2] \u2502 ['A47J', 'B65D']         \u2502 ['A47J', 'B65D']         \u2502 ['JOEKE', 'NOORDHUIS']   \u2502 ['JOEKE', 'NOORDHUIS']   \u2502 {'lat_hash': 525, 'lon_hash': 58}        \u2502 {'lat_hash': 525, 'lon_hash': 58}        \u2502     26842439 \u2502     26842439 \u2502      52.50 \u2502      52.50 \u2502    5.750000 \u2502    5.750000 \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KON           \u2502 KON           \u2502 Koninklijke Philips Electronics N. V.    \u2502 Koninklijke Philips Electronics N. V.    \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ELECTRONICS KONINK PHILIPS  \u2502 ELECTRONICS KONINK PHILIPS  \u2502\n\u2502    18321511 \u2502    18321511 \u2502 exact  \u2502 exact   \u2502 jaccard &gt;= 0.5 \u2502 exact              \u2502 ['Coauthors Exact', 'Classes Exact', ... +2] \u2502 ['H04L']                 \u2502 ['H04L']                 \u2502 ['ROSENKRANZ', 'WERNER'] \u2502 ['ROSENKRANZ', 'WERNER'] \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502     26842439 \u2502     26842439 \u2502      51.45 \u2502      51.45 \u2502    5.466667 \u2502    5.466667 \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KON           \u2502 KON           \u2502 KONINKLIJKE PHILIPS ELECTRONICS N.V.     \u2502 KONINKLIJKE PHILIPS ELECTRONICS N.V.     \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ELECTRONICS KONINK PHILIPS  \u2502 ELECTRONICS KONINK PHILIPS  \u2502\n\u2502    18321838 \u2502    18321838 \u2502 exact  \u2502 exact   \u2502 jaccard &gt;= 0.5 \u2502 exact              \u2502 ['Coauthors Exact', 'Classes Exact', ... +2] \u2502 ['A61B', 'G09G']         \u2502 ['A61B', 'G09G']         \u2502 ['EDWARD', 'PARNAGIAN']  \u2502 ['EDWARD', 'PARNAGIAN']  \u2502 {'lat_hash': 525, 'lon_hash': 58}        \u2502 {'lat_hash': 525, 'lon_hash': 58}        \u2502     26842439 \u2502     26842439 \u2502      52.50 \u2502      52.50 \u2502    5.750000 \u2502    5.750000 \u2502 KONINKLIJKE PHILLIPS ELECTRONICS \u2502 KONINKLIJKE PHILLIPS ELECTRONICS \u2502 KON           \u2502 KON           \u2502 Koninklijke Phillips Electronics N.V.    \u2502 Koninklijke Phillips Electronics N.V.    \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ELECTRONICS KONINK PHILLIPS \u2502 ELECTRONICS KONINK PHILLIPS \u2502\n\u2502    18321856 \u2502    18321856 \u2502 exact  \u2502 exact   \u2502 jaccard &gt;= 0.5 \u2502 exact              \u2502 ['Coauthors Exact', 'Classes Exact', ... +2] \u2502 ['H01L']                 \u2502 ['H01L']                 \u2502 ['CHAPMAN', 'JEFFREY']   \u2502 ['CHAPMAN', 'JEFFREY']   \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502     26842439 \u2502     26842439 \u2502      51.45 \u2502      51.45 \u2502    5.466667 \u2502    5.466667 \u2502 KONINKLIJKE PHILPS ELECTRONICS   \u2502 KONINKLIJKE PHILPS ELECTRONICS   \u2502 KON           \u2502 KON           \u2502 Koninklijke Philps Electronics N. V.     \u2502 Koninklijke Philps Electronics N. V.     \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ELECTRONICS KONINK PHILPS   \u2502 ELECTRONICS KONINK PHILPS   \u2502\n\u2502    25033057 \u2502    25033057 \u2502 exact  \u2502 exact   \u2502 jaccard &gt;= 0.5 \u2502 exact              \u2502 ['Coauthors Exact', 'Classes Exact', ... +2] \u2502 ['G11B']                 \u2502 ['G11B']                 \u2502 ['NORBERT', 'VOLLMANN']  \u2502 ['NORBERT', 'VOLLMANN']  \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502     26842439 \u2502     26842439 \u2502      51.45 \u2502      51.45 \u2502    5.466667 \u2502    5.466667 \u2502 PHILIPS GLOEILAMPENFABRIEKEN     \u2502 PHILIPS GLOEILAMPENFABRIEKEN     \u2502 PHI           \u2502 PHI           \u2502 N.V. PHILIPS' GLOEILAMPENFABRIEKEN       \u2502 N.V. PHILIPS' GLOEILAMPENFABRIEKEN       \u2502 ['GLOEILAMPENFABRIEKEN', 'PHILIPS']    \u2502 ['GLOEILAMPENFABRIEKEN', 'PHILIPS']    \u2502 GLOEILAMPENFAB PHILIPS      \u2502 GLOEILAMPENFAB PHILIPS      \u2502\n\u2502           \u2026 \u2502           \u2026 \u2502 \u2026      \u2502 \u2026       \u2502 \u2026              \u2502 \u2026                  \u2502 \u2026                                            \u2502 \u2026                        \u2502 \u2026                        \u2502 \u2026                        \u2502 \u2026                        \u2502 \u2026                                        \u2502 \u2026                                        \u2502            \u2026 \u2502            \u2026 \u2502          \u2026 \u2502          \u2026 \u2502           \u2026 \u2502           \u2026 \u2502 \u2026                                \u2502 \u2026                                \u2502 \u2026             \u2502 \u2026             \u2502 \u2026                                        \u2502 \u2026                                        \u2502 \u2026                                      \u2502 \u2026                                      \u2502 \u2026                           \u2502 \u2026                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <p>The result above is the blocked table, with a column added for every <code>Comparison</code>. The value of each column is the level that the record pair matched at. For example, there is now a \"Name\" column, filled with values like \"exact\", \"share 1 token\", etc.</p> <p>Now that we have our features, we can use the Fellegi-Sunter model to train weights for each of these features. This is a probabilistic model that is based on the concept of odds. When you see an exact match on name, that increases the odds of a match by some amount, maybe 10x. When you see a non-match on name, that decreases the odds of a match by some amount, maybe 0.1x. We can either train this from labeled data, or we can use unlabeled data using an algorithm called \"Expectation Maximization\".</p> In\u00a0[10]: Copied! <pre>from mismo.fs import train_comparisons_using_em  # noqa: E402\n\nweights = train_comparisons_using_em(\n    comparisons, featured, featured, max_pairs=100_000, seed=42\n)\n# Can save and load weights\n# weights.to_json(\"weights.json\")\n# weights = ComparisonWeights.from_json(\"weights.json\")\nweights.plot()\n</pre> from mismo.fs import train_comparisons_using_em  # noqa: E402  weights = train_comparisons_using_em(     comparisons, featured, featured, max_pairs=100_000, seed=42 ) # Can save and load weights # weights.to_json(\"weights.json\") # weights = ComparisonWeights.from_json(\"weights.json\") weights.plot() <pre>FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))</pre> Out[10]: <p>In the above plot, you can see the odds for \"share 1 class\" and \"share 2+ classes\" are nearly the same. That doesn't quite make sense, and might be an indicator that we should look more into this to see if there is a problem with the features that we are using. But for now let's just move on.</p> <p>Use the weights to score the record pairs, finding the odds for each `Comparison``, and then combining them into an overall odds for the record pair.</p> In\u00a0[11]: Copied! <pre>scored = weights.score(compared)\nscored = scored.cache()\nscored\n</pre> scored = weights.score(compared) scored = scored.cache() scored Out[11]: <pre>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 record_id_l \u2503 record_id_r \u2503 odds         \u2503 Name   \u2503 Name_odds \u2503 Classes \u2503 Classes_odds \u2503 Coauthors      \u2503 Coauthors_odds \u2503 Coords             \u2503 Coords_odds \u2503 blocking_rules                               \u2503 classes_l                \u2503 classes_r                \u2503 coauthors_l              \u2503 coauthors_r              \u2503 coords_hashed_l                          \u2503 coords_hashed_r                          \u2503 label_true_l \u2503 label_true_r \u2503 latitude_l \u2503 latitude_r \u2503 longitude_l \u2503 longitude_r \u2503 name_cleaned_l                   \u2503 name_cleaned_r                   \u2503 name_first3_l \u2503 name_first3_r \u2503 name_l                                   \u2503 name_r                                   \u2503 name_tokens_l                          \u2503 name_tokens_r                          \u2503 name_true_l                 \u2503 name_true_r                 \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 int64       \u2502 int64       \u2502 float64      \u2502 string \u2502 float64   \u2502 string  \u2502 float64      \u2502 string         \u2502 float64        \u2502 string             \u2502 float64     \u2502 array&lt;string&gt;                                \u2502 array&lt;string&gt;            \u2502 array&lt;string&gt;            \u2502 array&lt;string&gt;            \u2502 array&lt;string&gt;            \u2502 struct&lt;lat_hash: int16, lon_hash: int16&gt; \u2502 struct&lt;lat_hash: int16, lon_hash: int16&gt; \u2502 int64        \u2502 int64        \u2502 float64    \u2502 float64    \u2502 float64     \u2502 float64     \u2502 string                           \u2502 string                           \u2502 string        \u2502 string        \u2502 string                                   \u2502 string                                   \u2502 array&lt;string&gt;                          \u2502 array&lt;string&gt;                          \u2502 string                      \u2502 string                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    26827037 \u2502    26827037 \u2502 1.878260e+05 \u2502 exact  \u2502 41.989888 \u2502 exact   \u2502    28.963071 \u2502 jaccard &gt;= 0.5 \u2502     183.491296 \u2502 both coord missing \u2502    0.841688 \u2502 ['Coauthors Exact', 'Classes Exact', ... +1] \u2502 ['H01J']                 \u2502 ['H01J']                 \u2502 ['BOHLANDER']            \u2502 ['BOHLANDER']            \u2502 NULL                                     \u2502 NULL                                     \u2502     26842439 \u2502     26842439 \u2502       NULL \u2502       NULL \u2502        NULL \u2502        NULL \u2502 PHILIPS                          \u2502 PHILIPS                          \u2502 PHI           \u2502 PHI           \u2502 PHILIPS NV                               \u2502 PHILIPS NV                               \u2502 ['PHILIPS']                            \u2502 ['PHILIPS']                            \u2502 PHILIPS                     \u2502 PHILIPS                     \u2502\n\u2502      856660 \u2502      856660 \u2502 1.878260e+05 \u2502 exact  \u2502 41.989888 \u2502 exact   \u2502    28.963071 \u2502 jaccard &gt;= 0.5 \u2502     183.491296 \u2502 both coord missing \u2502    0.841688 \u2502 ['Coauthors Exact', 'Classes Exact', ... +1] \u2502 ['B03C']                 \u2502 ['B03C']                 \u2502 ['PERSSON', 'TORSTEN']   \u2502 ['PERSSON', 'TORSTEN']   \u2502 NULL                                     \u2502 NULL                                     \u2502       848003 \u2502       848003 \u2502       NULL \u2502       NULL \u2502        NULL \u2502        NULL \u2502 ALSTOM                           \u2502 ALSTOM                           \u2502 ALS           \u2502 ALS           \u2502 ALSTOM NV                                \u2502 ALSTOM NV                                \u2502 ['ALSTOM']                             \u2502 ['ALSTOM']                             \u2502 ALSTOM                      \u2502 ALSTOM                      \u2502\n\u2502     9066395 \u2502     9066395 \u2502 1.878260e+05 \u2502 exact  \u2502 41.989888 \u2502 exact   \u2502    28.963071 \u2502 jaccard &gt;= 0.5 \u2502     183.491296 \u2502 both coord missing \u2502    0.841688 \u2502 ['Coauthors Exact', 'Classes Exact', ... +1] \u2502 ['B65B']                 \u2502 ['B65B']                 \u2502 ['HENK', 'VLAAM']        \u2502 ['HENK', 'VLAAM']        \u2502 NULL                                     \u2502 NULL                                     \u2502      9076863 \u2502      9076863 \u2502       NULL \u2502       NULL \u2502        NULL \u2502        NULL \u2502 FERAG AG                         \u2502 FERAG AG                         \u2502 FER           \u2502 FER           \u2502 FERAG AG                                 \u2502 FERAG AG                                 \u2502 ['AG', 'FERAG']                        \u2502 ['AG', 'FERAG']                        \u2502 FERAG                       \u2502 FERAG                       \u2502\n\u2502    18321305 \u2502    18321305 \u2502 1.878260e+05 \u2502 exact  \u2502 41.989888 \u2502 exact   \u2502    28.963071 \u2502 jaccard &gt;= 0.5 \u2502     183.491296 \u2502 both coord missing \u2502    0.841688 \u2502 ['Coauthors Exact', 'Classes Exact', ... +1] \u2502 ['H04B', 'H04M', ... +1] \u2502 ['H04B', 'H04M', ... +1] \u2502 ['DECKROEY', 'SANUIL']   \u2502 ['DECKROEY', 'SANUIL']   \u2502 NULL                                     \u2502 NULL                                     \u2502     26842439 \u2502     26842439 \u2502       NULL \u2502       NULL \u2502        NULL \u2502        NULL \u2502 KONINKLIJKE PHILIPS ELECTRONIC   \u2502 KONINKLIJKE PHILIPS ELECTRONIC   \u2502 KON           \u2502 KON           \u2502 KONINKLIJKE PHILIPS ELECTRONIC CO., LTD. \u2502 KONINKLIJKE PHILIPS ELECTRONIC CO., LTD. \u2502 ['ELECTRONIC', 'KONINKLIJKE', ... +1]  \u2502 ['ELECTRONIC', 'KONINKLIJKE', ... +1]  \u2502 ELECTRONIC KONINK PHILIPS   \u2502 ELECTRONIC KONINK PHILIPS   \u2502\n\u2502    18321363 \u2502    18321363 \u2502 1.878260e+05 \u2502 exact  \u2502 41.989888 \u2502 exact   \u2502    28.963071 \u2502 jaccard &gt;= 0.5 \u2502     183.491296 \u2502 both coord missing \u2502    0.841688 \u2502 ['Coauthors Exact', 'Classes Exact', ... +1] \u2502 ['A61B', 'G01S', ... +1] \u2502 ['A61B', 'G01S', ... +1] \u2502 ['NING', 'XIANG']        \u2502 ['NING', 'XIANG']        \u2502 NULL                                     \u2502 NULL                                     \u2502     26842439 \u2502     26842439 \u2502       NULL \u2502       NULL \u2502        NULL \u2502        NULL \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KON           \u2502 KON           \u2502 Koninklijke Philips Electronics          \u2502 Koninklijke Philips Electronics          \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ELECTRONICS KONINK PHILIPS  \u2502 ELECTRONICS KONINK PHILIPS  \u2502\n\u2502    18321400 \u2502    18321400 \u2502 2.230913e+06 \u2502 exact  \u2502 41.989888 \u2502 exact   \u2502    28.963071 \u2502 jaccard &gt;= 0.5 \u2502     183.491296 \u2502 exact              \u2502    9.997185 \u2502 ['Coauthors Exact', 'Classes Exact', ... +2] \u2502 ['A47J', 'B65D']         \u2502 ['A47J', 'B65D']         \u2502 ['JOEKE', 'NOORDHUIS']   \u2502 ['JOEKE', 'NOORDHUIS']   \u2502 {'lat_hash': 525, 'lon_hash': 58}        \u2502 {'lat_hash': 525, 'lon_hash': 58}        \u2502     26842439 \u2502     26842439 \u2502      52.50 \u2502      52.50 \u2502    5.750000 \u2502    5.750000 \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KON           \u2502 KON           \u2502 Koninklijke Philips Electronics N. V.    \u2502 Koninklijke Philips Electronics N. V.    \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ELECTRONICS KONINK PHILIPS  \u2502 ELECTRONICS KONINK PHILIPS  \u2502\n\u2502    18321511 \u2502    18321511 \u2502 2.230913e+06 \u2502 exact  \u2502 41.989888 \u2502 exact   \u2502    28.963071 \u2502 jaccard &gt;= 0.5 \u2502     183.491296 \u2502 exact              \u2502    9.997185 \u2502 ['Coauthors Exact', 'Classes Exact', ... +2] \u2502 ['H04L']                 \u2502 ['H04L']                 \u2502 ['ROSENKRANZ', 'WERNER'] \u2502 ['ROSENKRANZ', 'WERNER'] \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502     26842439 \u2502     26842439 \u2502      51.45 \u2502      51.45 \u2502    5.466667 \u2502    5.466667 \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KONINKLIJKE PHILIPS ELECTRONICS  \u2502 KON           \u2502 KON           \u2502 KONINKLIJKE PHILIPS ELECTRONICS N.V.     \u2502 KONINKLIJKE PHILIPS ELECTRONICS N.V.     \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ELECTRONICS KONINK PHILIPS  \u2502 ELECTRONICS KONINK PHILIPS  \u2502\n\u2502    18321838 \u2502    18321838 \u2502 2.230913e+06 \u2502 exact  \u2502 41.989888 \u2502 exact   \u2502    28.963071 \u2502 jaccard &gt;= 0.5 \u2502     183.491296 \u2502 exact              \u2502    9.997185 \u2502 ['Coauthors Exact', 'Classes Exact', ... +2] \u2502 ['A61B', 'G09G']         \u2502 ['A61B', 'G09G']         \u2502 ['EDWARD', 'PARNAGIAN']  \u2502 ['EDWARD', 'PARNAGIAN']  \u2502 {'lat_hash': 525, 'lon_hash': 58}        \u2502 {'lat_hash': 525, 'lon_hash': 58}        \u2502     26842439 \u2502     26842439 \u2502      52.50 \u2502      52.50 \u2502    5.750000 \u2502    5.750000 \u2502 KONINKLIJKE PHILLIPS ELECTRONICS \u2502 KONINKLIJKE PHILLIPS ELECTRONICS \u2502 KON           \u2502 KON           \u2502 Koninklijke Phillips Electronics N.V.    \u2502 Koninklijke Phillips Electronics N.V.    \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ELECTRONICS KONINK PHILLIPS \u2502 ELECTRONICS KONINK PHILLIPS \u2502\n\u2502    18321856 \u2502    18321856 \u2502 2.230913e+06 \u2502 exact  \u2502 41.989888 \u2502 exact   \u2502    28.963071 \u2502 jaccard &gt;= 0.5 \u2502     183.491296 \u2502 exact              \u2502    9.997185 \u2502 ['Coauthors Exact', 'Classes Exact', ... +2] \u2502 ['H01L']                 \u2502 ['H01L']                 \u2502 ['CHAPMAN', 'JEFFREY']   \u2502 ['CHAPMAN', 'JEFFREY']   \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502     26842439 \u2502     26842439 \u2502      51.45 \u2502      51.45 \u2502    5.466667 \u2502    5.466667 \u2502 KONINKLIJKE PHILPS ELECTRONICS   \u2502 KONINKLIJKE PHILPS ELECTRONICS   \u2502 KON           \u2502 KON           \u2502 Koninklijke Philps Electronics N. V.     \u2502 Koninklijke Philps Electronics N. V.     \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ['ELECTRONICS', 'KONINKLIJKE', ... +1] \u2502 ELECTRONICS KONINK PHILPS   \u2502 ELECTRONICS KONINK PHILPS   \u2502\n\u2502    25033057 \u2502    25033057 \u2502 2.230913e+06 \u2502 exact  \u2502 41.989888 \u2502 exact   \u2502    28.963071 \u2502 jaccard &gt;= 0.5 \u2502     183.491296 \u2502 exact              \u2502    9.997185 \u2502 ['Coauthors Exact', 'Classes Exact', ... +2] \u2502 ['G11B']                 \u2502 ['G11B']                 \u2502 ['NORBERT', 'VOLLMANN']  \u2502 ['NORBERT', 'VOLLMANN']  \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502 {'lat_hash': 515, 'lon_hash': 55}        \u2502     26842439 \u2502     26842439 \u2502      51.45 \u2502      51.45 \u2502    5.466667 \u2502    5.466667 \u2502 PHILIPS GLOEILAMPENFABRIEKEN     \u2502 PHILIPS GLOEILAMPENFABRIEKEN     \u2502 PHI           \u2502 PHI           \u2502 N.V. PHILIPS' GLOEILAMPENFABRIEKEN       \u2502 N.V. PHILIPS' GLOEILAMPENFABRIEKEN       \u2502 ['GLOEILAMPENFABRIEKEN', 'PHILIPS']    \u2502 ['GLOEILAMPENFABRIEKEN', 'PHILIPS']    \u2502 GLOEILAMPENFAB PHILIPS      \u2502 GLOEILAMPENFAB PHILIPS      \u2502\n\u2502           \u2026 \u2502           \u2026 \u2502            \u2026 \u2502 \u2026      \u2502         \u2026 \u2502 \u2026       \u2502            \u2026 \u2502 \u2026              \u2502              \u2026 \u2502 \u2026                  \u2502           \u2026 \u2502 \u2026                                            \u2502 \u2026                        \u2502 \u2026                        \u2502 \u2026                        \u2502 \u2026                        \u2502 \u2026                                        \u2502 \u2026                                        \u2502            \u2026 \u2502            \u2026 \u2502          \u2026 \u2502          \u2026 \u2502           \u2026 \u2502           \u2026 \u2502 \u2026                                \u2502 \u2026                                \u2502 \u2026             \u2502 \u2026             \u2502 \u2026                                        \u2502 \u2026                                        \u2502 \u2026                                      \u2502 \u2026                                      \u2502 \u2026                           \u2502 \u2026                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <p>We can plot these compared pairs. We can see which comparison levels are most common, which occur together, which lead to matches, and which lead to non-matches.</p> <p>The exact match levels have the highest odds, and the else levels have the lowest. The other levels are somewhere in between.</p> In\u00a0[12]: Copied! <pre>from mismo.compare import plot_compared  # noqa: E402\n\nplot_compared(compared, comparisons=comparisons, weights=weights)\n</pre> from mismo.compare import plot_compared  # noqa: E402  plot_compared(compared, comparisons=comparisons, weights=weights) Out[12]: <p>It looks like an odds of 50 seems to separate the pairs between non-matches and matches. If I hover over the above chart, I can see that pretty much all the \"else\" comparisons are in the low cluster, and all the \"exact\" comparisons are in the high cluster.</p> In\u00a0[13]: Copied! <pre>odds_threshold = 50\n(scored.odds &gt;= odds_threshold).value_counts()\n</pre> odds_threshold = 50 (scored.odds &gt;= odds_threshold).value_counts() Out[13]: <pre>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 GreaterEqual(odds, 50) \u2503 GreaterEqual(odds, 50)_count \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 boolean                \u2502 int64                        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 False                  \u2502                       403716 \u2502\n\u2502 True                   \u2502                       239641 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <p>Let's be really picky and only take the most likely matches as true matches, and then perform connected components to label each patent with its inventor:</p> In\u00a0[14]: Copied! <pre>from mismo.cluster import connected_components  # noqa: E402\n\nlinks = scored[_.odds &gt;= odds_threshold]\nlinks = links.cache()\nprint(links.count().execute())\nlabels = connected_components(links, nodes=featured.record_id)\nprint(labels.count().execute())\nlabels\n</pre> from mismo.cluster import connected_components  # noqa: E402  links = scored[_.odds &gt;= odds_threshold] links = links.cache() print(links.count().execute()) labels = connected_components(links, nodes=featured.record_id) print(labels.count().execute()) labels <pre>239641\n2379\n</pre> Out[14]: <pre>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 record_id \u2503 component \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 int64     \u2502 int64     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  16362176 \u2502  16362176 \u2502\n\u2502  11552390 \u2502  11552390 \u2502\n\u2502  10509227 \u2502  10508797 \u2502\n\u2502  29734932 \u2502  29734932 \u2502\n\u2502  32621220 \u2502     86718 \u2502\n\u2502  24954687 \u2502  24954687 \u2502\n\u2502   6230069 \u2502   6229490 \u2502\n\u2502  23053130 \u2502  23053130 \u2502\n\u2502  15313692 \u2502  15313579 \u2502\n\u2502  13455079 \u2502  13455079 \u2502\n\u2502         \u2026 \u2502         \u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> In\u00a0[15]: Copied! <pre>patents_labeled = patents.left_join(labels, \"record_id\")\npatents_labeled = patents_labeled.relocate(\"component\", after=\"label_true\")\npatents_labeled.order_by(\"component\").head(20)\n</pre> patents_labeled = patents.left_join(labels, \"record_id\") patents_labeled = patents_labeled.relocate(\"component\", after=\"label_true\") patents_labeled.order_by(\"component\").head(20) Out[15]: <pre>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 record_id \u2503 label_true \u2503 component \u2503 name_true            \u2503 name                         \u2503 latitude  \u2503 longitude \u2503 coauthors                                                                        \u2503 classes                                                                          \u2503 record_id_right \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 int64     \u2502 int64      \u2502 int64     \u2502 string               \u2502 string                       \u2502 float64   \u2502 float64   \u2502 string                                                                           \u2502 string                                                                           \u2502 int64           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      2909 \u2502     402600 \u2502      2909 \u2502 AGILENT TECHNOLOGIES \u2502 * AGILENT TECHNOLOGIES, INC. \u2502  0.000000 \u2502  0.000000 \u2502 KONINK PHILIPS ELECTRONICS N V**DAVID E  SNYDER**THOMAS D  LYSTER                \u2502 A61N**A61B                                                                       \u2502            2909 \u2502\n\u2502      3574 \u2502     569309 \u2502      3574 \u2502 AKZO NOBEL           \u2502 * AKZO NOBEL N.V.            \u2502  0.000000 \u2502  0.000000 \u2502 TSJERK  HOEKSTRA**ANDRESS K  JOHNSON**TERESA MARIE  CHERON**ALBERTO  SLIKTA**JA\u2026 \u2502 G01N**B01L**C11D**G02F**F16L                                                     \u2502            3574 \u2502\n\u2502      3575 \u2502     569309 \u2502      3574 \u2502 AKZO NOBEL           \u2502 * AKZO NOBEL NV              \u2502  0.000000 \u2502  0.000000 \u2502 WILLIAM JOHN ERNEST  PARR**HANS  OSKARSSON**MARTIN  HELLSTEN**KORNELIS  OVERKEM\u2026 \u2502 C09K**F17D**B01F**C23F                                                           \u2502            3575 \u2502\n\u2502    578319 \u2502     569309 \u2502      3574 \u2502 AKZO NOBEL           \u2502 AKZO NOBEL                   \u2502  0.000000 \u2502  0.000000 \u2502 MARTIN HELLSTEN**PIELOCH MARK**JOHAN ROERAADE**KARLSSON**FREDDIE HANSSON**MARCE\u2026 \u2502 C10M**A23G**A61K**C01B**F28F**D21H**A23K**G01N**C08L**H01M**F15D**C08K**C08J**C\u2026 \u2502          578319 \u2502\n\u2502    578320 \u2502     569309 \u2502      3574 \u2502 AKZO NOBEL           \u2502 Akzo Nobel                   \u2502 52.500000 \u2502  5.750000 \u2502 BENNINK HERMAN JAN TIJMEN COELINGH**VERBOST PIETER M                             \u2502 A61K                                                                             \u2502          578320 \u2502\n\u2502    578321 \u2502     569309 \u2502      3574 \u2502 AKZO NOBEL           \u2502 Akzo Nobel                   \u2502 51.983333 \u2502  5.916667 \u2502 ZHANG MINGIANG**GROOTENHUIS PETER**MOOREN PIETER GERARDUS**GIBSON SAMUEL GEORGE\u2026 \u2502 C12N**A61K**C07D**C07H**C07K**A61P**C08B                                         \u2502          578321 \u2502\n\u2502    578322 \u2502     569309 \u2502      3574 \u2502 AKZO NOBEL           \u2502 Akzo Nobel                   \u2502 51.983333 \u2502  5.916667 \u2502 TAMMER MARINUS CATHARINUS**HOGT ANDREAS HERMAN                                   \u2502 B01D                                                                             \u2502          578322 \u2502\n\u2502    578328 \u2502     569309 \u2502      3574 \u2502 AKZO NOBEL           \u2502 AKZO NOBEL B.V.              \u2502 51.983333 \u2502  5.916667 \u2502 LASCHEWSKY ANDRA**PAULKE BERND REINER**STRUCK OLIVER**FRAUNHOFER GES ZUR FORDER\u2026 \u2502 B01D**C08F**D21H**C08K**C08L                                                     \u2502          578328 \u2502\n\u2502    578329 \u2502     569309 \u2502      3574 \u2502 AKZO NOBEL           \u2502 Akzo Nobel B.V.              \u2502  0.000000 \u2502  0.000000 \u2502 OCONNOR PAUL**STAMIRES DENNIS**PEARSON GREGORY**JONES WILLIAM                    \u2502 C01F**B01J                                                                       \u2502          578329 \u2502\n\u2502    578426 \u2502     569309 \u2502      3574 \u2502 AKZO NOBEL           \u2502 AKZO NOBEL INC.              \u2502  0.000000 \u2502  0.000000 \u2502 SLIKTA ALBERTO**NGUYEN KHA**AGBAJE HENRY**ZHU SHAWN**EATON DAVID**NGUYEN GIAO**\u2026 \u2502 A01N**C07C                                                                       \u2502          578426 \u2502\n\u2502         \u2026 \u2502          \u2026 \u2502         \u2026 \u2502 \u2026                    \u2502 \u2026                            \u2502         \u2026 \u2502         \u2026 \u2502 \u2026                                                                                \u2502 \u2026                                                                                \u2502               \u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <p>Now let's evaluate how good our labeling is. Mismo wraps all of the evaluation metrics from sklearn, so we can use them with Ibis Tables.</p> In\u00a0[16]: Copied! <pre>labels_true = patents_labeled.select(\"record_id\", label=_.label_true)\nlabels_pred = patents_labeled.select(\"record_id\", label=_.component)\nprint(metrics.adjusted_rand_score(labels_true, labels_pred))\nprint(metrics.homogeneity_score(labels_true, labels_pred))\nprint(metrics.completeness_score(labels_true, labels_pred))\n</pre> labels_true = patents_labeled.select(\"record_id\", label=_.label_true) labels_pred = patents_labeled.select(\"record_id\", label=_.component) print(metrics.adjusted_rand_score(labels_true, labels_pred)) print(metrics.homogeneity_score(labels_true, labels_pred)) print(metrics.completeness_score(labels_true, labels_pred)) <pre>0.4189258934012049\n0.6418589644528467\n0.9644678801870049\n</pre>"},{"location":"reference/block/","title":"Blocking API","text":"<p>Utilities and classes for the blocking phase of record linkage, where we choose pairs of records to compare.</p>"},{"location":"reference/block/#mismo.block.join","title":"<code>mismo.block.join(left: Table, right: Table, condition) -&gt; Table</code>","text":"<p>Join two tables, afterwards adding a \"_l\" or \"_r\" suffix to all columns.</p> <p>Unlike ibis, which only adds suffixes to columns that are duplicated, this always adds suffixes to all columns.</p> PARAMETER  DESCRIPTION <code>left</code> <p>The left table</p> <p> TYPE: <code>Table</code> </p> <code>right</code> <p>The right table</p> <p> TYPE: <code>Table</code> </p> <code>condition</code> <p>Anything that Ibis accepts as a join condition. This should be specified without the \"_l\" and \"_r\" suffixes, eg <code>left.name == right.name</code>, not <code>left.name_l == right.name_r</code>, because the suffixes will be added AFTER the join.</p> <p> </p>"},{"location":"reference/block/#mismo.block.BlockingRule","title":"<code>mismo.block.BlockingRule</code>","text":"<p>A rule for blocking two tables together.</p>"},{"location":"reference/block/#mismo.block.BlockingRule.condition","title":"<code>condition: _Condition</code>  <code>property</code>","text":"<p>The condition that determines if two records should be blocked together.</p>"},{"location":"reference/block/#mismo.block.BlockingRule.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>The name of the rule. Must be unique within a <code>BlockingRules</code>.</p>"},{"location":"reference/block/#mismo.block.BlockingRule.__init__","title":"<code>__init__(name: str, condition: _Condition) -&gt; None</code>","text":"<p>Create a new blocking rule.</p> PARAMETER  DESCRIPTION <code>name</code> <p>The name of the rule. Must be unique within a <code>BlockingRules</code>.</p> <p> TYPE: <code>str</code> </p> <code>condition</code> <p>The condition that determines if two records should be blocked together. This can be any of the following:</p> <ul> <li>anything that ibis accepts as a join predicate</li> <li>a literal True, which will cause a cross join</li> <li>tuple[str, str]</li> <li>tuple[Column, Column]</li> <li>tuple[Deferred, Deferred]</li> <li>A callable that takes two tables and returns any of the above</li> </ul> <p> TYPE: <code>_Condition</code> </p>"},{"location":"reference/block/#mismo.block.BlockingRule.block","title":"<code>block(left: Table, right: Table) -&gt; Table</code>","text":"<p>Block two tables together.</p>"},{"location":"reference/block/#mismo.block.BlockingRules","title":"<code>mismo.block.BlockingRules</code>","text":"<p>An unordered, dict-like collection of <code>BlockingRule</code>s</p>"},{"location":"reference/block/#mismo.block.BlockingRules.__getitem__","title":"<code>__getitem__(name: str) -&gt; BlockingRule</code>","text":"<p>Get a rule by name.</p>"},{"location":"reference/block/#mismo.block.BlockingRules.__init__","title":"<code>__init__(*rules: BlockingRule) -&gt; None</code>","text":"<p>Create a new collection of blocking rules.</p> <p>Each rule must have a unique name.</p>"},{"location":"reference/block/#mismo.block.BlockingRules.__iter__","title":"<code>__iter__() -&gt; Iterator[BlockingRule]</code>","text":"<p>Iterate over the rules.</p>"},{"location":"reference/block/#mismo.block.BlockingRules.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>The number of rules.</p>"},{"location":"reference/block/#mismo.block.BlockingRules.block","title":"<code>block(left: Table, right: Table, *, labels: bool = False) -&gt; Table</code>","text":"<p>Block two tables together using all the rules.</p> PARAMETER  DESCRIPTION <code>left</code> <p>The left table to block</p> <p> TYPE: <code>Table</code> </p> <code>right</code> <p>The right table to block</p> <p> TYPE: <code>Table</code> </p> <code>labels</code> <p>If False, the resulting table will only contain the columns of left and right. If True, a column of type <code>array&lt;string&gt;</code> will be added to the resulting table indicating which rules caused each record pair to be blocked.</p> <p>False is faster, because if a pair matches multiple rules we don't have to care about this. True is slower, because we need to test every rule, but this is useful for investigating the impact of each rule.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Table</code> <p>A table with all the columns of left (with a suffix of <code>_l</code>) and right (with a suffix of <code>_r</code>). Possibly with the labels column if <code>add_labels</code> is True.</p>"},{"location":"reference/block/#mismo.block.block_on_arrays","title":"<code>mismo.block.block_on_arrays(left_array_column: str, right_array_column: str) -&gt; Callable[[Table, Table], Table]</code>","text":"<p>Create a blocking rule for if two arrays share the same value.</p> <p>For instance, if your tables contains a column of tags, such as <code>[\"red\", \"green\"]</code> in one table and <code>[\"green\", \"blue\"]</code> in the other table. You might want to block these two records together because they both contain the tag <code>\"green\"</code>.</p> PARAMETER  DESCRIPTION <code>left_array_column</code> <p>The name of the column in the left table that contains the array.</p> <p> TYPE: <code>str</code> </p> <code>right_array_column</code> <p>The name of the column in the right table that contains the array.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>blocking_function</code> <p>A blocking function that takes the left and right tables as inputs and returns a table with the columns <code>record_id_l</code> and <code>record_id_r</code>.</p> <p> TYPE: <code>Callable[[Table, Table], Table]</code> </p>"},{"location":"reference/clean/","title":"Cleaning API","text":"<p>This module contains utilities for cleaning and preparing data for linkage.</p>"},{"location":"reference/clean/#mismo.clean.norm_whitespace","title":"<code>mismo.clean.norm_whitespace(texts: StringValue) -&gt; StringValue</code>","text":"<p>Strip leading/trailing whitespace, replace multiple whitespace with a single space.</p>"},{"location":"reference/cluster/","title":"Clustering API","text":"<p>After we have compared pairs of records, we need to somehow resolve these links into groups of records that are all the same entity. This is done with various graph algorithms, which are implemented in this module.</p>"},{"location":"reference/cluster/#mismo.cluster.connected_components","title":"<code>mismo.cluster.connected_components(edges: Table, *, nodes: Table | Column | None = None, max_iter: int | None = None) -&gt; Table</code>","text":"<p>Compute the connected components of a graph.</p> <p>This uses an iterative algorithm that is linear in terms of the size of the largest component. This is usually acceptable for our use case, because we expect the components to be small.</p> <p>Note</p> <p>The record_ids are assumed to refer to the same universe of records: If you have a left dataset and right dataset and they both have a record with id <code>5</code>, then this algorithm assumes that those two records are the same, which is probably not what you want.</p> <p>To fix this scenario, you should make the record ids be a composite keys of type <code>struct&lt;dataset: string, record_id: uint64&gt;</code>:</p> <pre><code>```python\n&gt;&gt;&gt; edges = ibis.memtable(\n...     {\n...         \"record_id_l\": [0, 0, 2],\n...         \"record_id_r\": [1, 2, 4],\n...     }\n... )\n&gt;&gt;&gt; connected_components(edges)\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 record_id \u2503 component \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 int64     \u2502 int64     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502         3 \u2502         0 \u2502\n\u2502         0 \u2502         0 \u2502\n\u2502         1 \u2502         0 \u2502\n\u2502         8 \u2502         8 \u2502\n\u2502         2 \u2502         0 \u2502\n\u2502         9 \u2502         8 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; edges_fixed = edges.mutate(\n...     record_id_l=ibis.struct(\n...         {\n...             \"dataset\": \"left\",\n...             \"record_id\": edges.record_id_l,\n...         }\n...     ),\n...     record_id_r=ibis.struct(\n...         {\n...             \"dataset\": \"right\",\n...             \"record_id\": edges.record_id_r,\n...         }\n...     ),\n... )\n&gt;&gt;&gt; edges_fixed\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 record_id_l                               \u2503 record_id_r                               \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 struct&lt;dataset: string, record_id: int64&gt; \u2502 struct&lt;dataset: string, record_id: int64&gt; \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 {'dataset': 'left', 'record_id': 0}       \u2502 {'dataset': 'right', 'record_id': 1}      \u2502\n\u2502 {'dataset': 'left', 'record_id': 0}       \u2502 {'dataset': 'right', 'record_id': 2}      \u2502\n\u2502 {'dataset': 'left', 'record_id': 2}       \u2502 {'dataset': 'right', 'record_id': 3}      \u2502\n\u2502 {'dataset': 'left', 'record_id': 8}       \u2502 {'dataset': 'right', 'record_id': 9}      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; connected_components(edges_fixed)\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 record_id                                 \u2503 component \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 struct&lt;dataset: string, record_id: int64&gt; \u2502 uint64    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 {'dataset': 'right', 'record_id': 9}      \u2502         2 \u2502\n\u2502 {'dataset': 'left', 'record_id': 0}       \u2502         0 \u2502\n\u2502 {'dataset': 'left', 'record_id': 2}       \u2502         1 \u2502\n\u2502 {'dataset': 'right', 'record_id': 3}      \u2502         1 \u2502\n\u2502 {'dataset': 'left', 'record_id': 8}       \u2502         2 \u2502\n\u2502 {'dataset': 'right', 'record_id': 2}      \u2502         0 \u2502\n\u2502 {'dataset': 'right', 'record_id': 1}      \u2502         0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n</code></pre> PARAMETER  DESCRIPTION <code>edges</code> <p>A table with the columns (record_id_l, record_id_r). The datatypes can be anything, but they must be the same.</p> <p> TYPE: <code>Table</code> </p> <code>nodes</code> <p>A table with the column record_id, or the record_id column itself. If provided, the output will include labels for all nodes in this table, even if they are not in the edges. If not provided, the output will only include labels for nodes that appear in the edges.</p> <p> TYPE: <code>Table | Value</code> DEFAULT: <code>None</code> </p> <code>max_iter</code> <p>The maximum number of iterations to run. If None, run until convergence.</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>labels</code> <p>Labeling for left records. Has columns (record_id, component: uint64).</p> <p> TYPE: <code>Table</code> </p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from mismo.cluster import connected_components\n&gt;&gt;&gt; edges_list = [\n...     (\"a\", \"x\"),\n...     (\"b\", \"x\"),\n...     (\"b\", \"y\"),\n...     (\"c\", \"y\"),\n...     (\"c\", \"z\"),\n...     (\"g\", \"h\"),\n... ]\n&gt;&gt;&gt; edges_df = pd.DataFrame(edges_list, columns=[\"record_id_l\", \"record_id_r\"])\n&gt;&gt;&gt; edges = ibis.memtable(edges_df)\n&gt;&gt;&gt; connected_components(edges)\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 record_id \u2503 component \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 string    \u2502 uint64    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 x         \u2502         0 \u2502\n\u2502 y         \u2502         0 \u2502\n\u2502 z         \u2502         0 \u2502\n\u2502 h         \u2502         3 \u2502\n\u2502 a         \u2502         0 \u2502\n\u2502 b         \u2502         0 \u2502\n\u2502 c         \u2502         0 \u2502\n\u2502 g         \u2502         3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/compare/","title":"Comparing API","text":"<p>Once records are blocked together into pairs, we actually can do pairwise comparisons on them.</p>"},{"location":"reference/compare/#comparison-objects","title":"Comparison Objects","text":"<p>A Comparisons is an unordered dict-like collection of Comparisons. Each Comparison represents a dimension to compare against, such as name, location, price, date, etc. Each one contains many ComparisonLevels, each of which is a level of aggreement, such as exact, misspelling, within_1_km, etc.</p>"},{"location":"reference/compare/#mismo.compare.Comparisons","title":"<code>mismo.compare.Comparisons</code>","text":"<p>An unordered, dict-like collection of Comparisons.</p>"},{"location":"reference/compare/#mismo.compare.Comparisons.__getitem__","title":"<code>__getitem__(name: str) -&gt; Comparison</code>","text":"<p>Get a comparison by name.</p>"},{"location":"reference/compare/#mismo.compare.Comparisons.__init__","title":"<code>__init__(comparisons: Iterable[Comparison])</code>","text":"<p>Create a set of Comparisons.</p> PARAMETER  DESCRIPTION <code>comparisons</code> <p>The comparisons to include in the set.</p> <p> TYPE: <code>Iterable[Comparison]</code> </p>"},{"location":"reference/compare/#mismo.compare.Comparisons.__iter__","title":"<code>__iter__() -&gt; Iterator[Comparison]</code>","text":"<p>Iterate over the comparisons.</p>"},{"location":"reference/compare/#mismo.compare.Comparisons.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>The number of comparisons.</p>"},{"location":"reference/compare/#mismo.compare.Comparisons.label_pairs","title":"<code>label_pairs(pairs: Table) -&gt; Table</code>","text":"<p>Label each record pair for each Comparison.</p> <p>Adds columns to the pairs table, one for each Comparison. The columns are named after the Comparison, and contain the label for each record pair.</p> PARAMETER  DESCRIPTION <code>pairs</code> <p>A table of record pairs, with each column suffixed with _l or _r.</p> <p> TYPE: <code>Table</code> </p>"},{"location":"reference/compare/#mismo.compare.Comparison","title":"<code>mismo.compare.Comparison</code>","text":"<p>A measure of record pair similarity based on one dimension, e.g. name or date.</p> <p>This acts like an ordered, dict-like collection of ComparisonLevels. You can access the levels by index or by name, or iterate over them. The last level is always an <code>else</code> level, which matches all record pairs if none of the previous levels matched.</p>"},{"location":"reference/compare/#mismo.compare.Comparison.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>The name of the comparison. Must be unique within a set of Comparisons.</p> <p>An example might be \"name\", \"date\", \"address\", \"latlon\", \"price\".</p>"},{"location":"reference/compare/#mismo.compare.Comparison.__getitem__","title":"<code>__getitem__(name_or_index)</code>","text":"<p>Get a level by name or index.</p>"},{"location":"reference/compare/#mismo.compare.Comparison.__init__","title":"<code>__init__(name: str, levels: Iterable[ComparisonLevel])</code>","text":"<p>Create a Comparison.</p> PARAMETER  DESCRIPTION <code>name</code> <p>The name of the comparison. Must be unique within a set of Comparisons.</p> <p> TYPE: <code>str</code> </p> <code>levels</code> <p>The levels of the comparison. You may include an <code>else</code> level as a final level that matches everything, or it will be added automatically if you don't include one.</p> <p> TYPE: <code>Iterable[ComparisonLevel]</code> </p>"},{"location":"reference/compare/#mismo.compare.Comparison.__iter__","title":"<code>__iter__() -&gt; Iterator[ComparisonLevel]</code>","text":"<p>Iterate over the levels, including the ELSE level.</p>"},{"location":"reference/compare/#mismo.compare.Comparison.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>The number of levels, including the ELSE level.</p>"},{"location":"reference/compare/#mismo.compare.Comparison.label_pairs","title":"<code>label_pairs(pairs: Table) -&gt; StringColumn</code>","text":"<p>Label each record pair with the level that it matches.</p> <p>Go through the levels in order. If a record pair matches a level, label it. If none of the levels match a pair, it labeled as \"else\".</p> PARAMETER  DESCRIPTION <code>pairs</code> <p>A table of record pairs.</p> <p> TYPE: <code>Table</code> </p> RETURNS DESCRIPTION <code>labels</code> <p>The labels for each record pair.</p> <p> TYPE: <code>StringColumn</code> </p>"},{"location":"reference/compare/#mismo.compare.ComparisonLevel","title":"<code>mismo.compare.ComparisonLevel</code>  <code>dataclass</code>","text":"<p>A Level within a Comparison, such as exact, phonetic, or within_1_day.</p> <p>A ComparisonLevel is a named condition that determines whether a record pair matches that level.</p>"},{"location":"reference/compare/#mismo.compare.ComparisonLevel.condition","title":"<code>condition: bool | Deferred | Callable[[Table], BooleanValue]</code>  <code>instance-attribute</code>","text":"<p>A condition that determines whether a record pair matches this level.</p> <p>Examples:</p> <ul> <li><code>_.name_l == _.name_r</code></li> <li><code>lambda t: (t.cost_l - t.cost_r).abs() / t.cost_l &lt; 0.1</code></li> <li><code>True</code></li> </ul>"},{"location":"reference/compare/#mismo.compare.ComparisonLevel.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":"<p>The name of the level. Should be short and unique within a Comparison.</p> <p>Examples:</p> <ul> <li>\"exact\"</li> <li>\"misspelling\"</li> <li>\"phonetic\"</li> <li>\"within_1_day\"</li> <li>\"within_1_km\"</li> <li>\"within_10_percent\"</li> </ul>"},{"location":"reference/compare/#mismo.compare.ComparisonLevel.is_match","title":"<code>is_match(pairs: Table) -&gt; BooleanValue</code>","text":"<p>Determine whether a record pair matches this level.</p> <p>Uses <code>self.condition</code> to determine whether a record pair matches this level.</p> PARAMETER  DESCRIPTION <code>pairs</code> <p>A table of record pairs.</p> <p> TYPE: <code>Table</code> </p>"},{"location":"reference/compare/#comparison-functions","title":"Comparison Functions","text":"<p>These utility functions help you create ComparisonLevels</p>"},{"location":"reference/compare/#mismo.compare.jaccard","title":"<code>mismo.compare.jaccard(a: ArrayValue, b: ArrayValue) -&gt; FloatingValue</code>","text":"<p>The Jaccard similarity between two arrays.</p> PARAMETER  DESCRIPTION <code>a</code> <p>The first array.</p> <p> TYPE: <code>ArrayValue</code> </p> <code>b</code> <p>The second array.</p> <p> TYPE: <code>ArrayValue</code> </p> RETURNS DESCRIPTION <code>FloatingValue</code> <p>The Jaccard similarity between the two arrays.</p>"},{"location":"reference/compare/#mismo.compare.distance_km","title":"<code>mismo.compare.distance_km(*, lat1: FloatingValue, lon1: FloatingValue, lat2: FloatingValue, lon2: FloatingValue) -&gt; FloatingValue</code>","text":"<p>The distance between two points on the Earth's surface, in kilometers.</p> PARAMETER  DESCRIPTION <code>lat1</code> <p>The latitude of the first point.</p> <p> TYPE: <code>FloatingValue</code> </p> <code>lon1</code> <p>The longitude of the first point.</p> <p> TYPE: <code>FloatingValue</code> </p> <code>lat2</code> <p>The latitude of the second point.</p> <p> TYPE: <code>FloatingValue</code> </p> <code>lon2</code> <p>The longitude of the second point.</p> <p> TYPE: <code>FloatingValue</code> </p> RETURNS DESCRIPTION <code>distance</code> <p>The distance between the two points, in kilometers.</p> <p> TYPE: <code>FloatingValue</code> </p>"},{"location":"reference/datasets/","title":"Datasets","text":"<p>Load some toy datasets for testing and examples.</p>"},{"location":"reference/datasets/#mismo.datasets.load_patents","title":"<code>mismo.datasets.load_patents(backend: ibis.BaseBackend | None = None) -&gt; Table</code>","text":"<p>Load the PATSTAT dataset</p> <p>This represents a dataset of patents, and the task is to determine which patents came from the same inventor.</p> <p>This comes from the Dedupe Patent Example.</p> RETURNS DESCRIPTION <code>Table</code> <p>An Ibis Table with the following schema:</p> <ul> <li>record_id: int64   A unique ID for each row in the table.</li> <li>label_true: int64   The manually labeled, true ID of the inventor.</li> <li>name_true: str   The manually labeled, true name of the inventor.</li> <li>name: str   The raw name on the patent.</li> <li>latitude: float64   Geocoded from the inventor's address. 0.0 indicates no address was found</li> <li>longitude: float64</li> <li>coauthor: str   A list of coauthors on the patent, separated by \"**\"</li> <li>class_: str   A list of 4-character IPC technical codes, separated by \"**\"</li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; load_patents()\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 record_id \u2503 label_true \u2503 name_true            \u2503 name                         \u2503 latitude \u2503 longitude \u2503 coauthors                      \u2503 classes                        \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 int64     \u2502 int64      \u2502 string               \u2502 string                       \u2502 float64  \u2502 float64   \u2502 string                         \u2502 string                         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      2909 \u2502     402600 \u2502 AGILENT TECHNOLOGIES \u2502 * AGILENT TECHNOLOGIES, INC. \u2502     0.00 \u2502  0.000000 \u2502 KONINK PHILIPS ELECTRONICS N \u2026 \u2502 A61N**A61B                     \u2502\n\u2502      3574 \u2502     569309 \u2502 AKZO NOBEL           \u2502 * AKZO NOBEL N.V.            \u2502     0.00 \u2502  0.000000 \u2502 TSJERK  HOEKSTRA**ANDRESS K  \u2026 \u2502 G01N**B01L**C11D**G02F**F16L   \u2502\n\u2502      3575 \u2502     569309 \u2502 AKZO NOBEL           \u2502 * AKZO NOBEL NV              \u2502     0.00 \u2502  0.000000 \u2502 WILLIAM JOHN ERNEST  PARR**HA\u2026 \u2502 C09K**F17D**B01F**C23F         \u2502\n\u2502      3779 \u2502     656303 \u2502 ALCATEL              \u2502 * ALCATEL N.V.               \u2502    52.35 \u2502  4.916667 \u2502 GUENTER  KOCHSMEIER**ZBIGNIEW\u2026 \u2502 G02B**G04G**H02G**G06F         \u2502\n\u2502      3780 \u2502     656303 \u2502 ALCATEL              \u2502 * ALCATEL N.V.               \u2502    52.35 \u2502  4.916667 \u2502 ZILAN  MANFRED**JOSIANE  RAMO\u2026 \u2502 H03G**B05D**H04L**H04B**C03B*\u2026 \u2502\n\u2502      3782 \u2502     656303 \u2502 ALCATEL              \u2502 * ALCATEL N.V.               \u2502     0.00 \u2502  0.000000 \u2502 OLIVIER  AUDOUIN**MICHEL  SOT\u2026 \u2502 H04B**H01S**H04J               \u2502\n\u2502     15041 \u2502    4333661 \u2502 CANON EUROPA         \u2502 * CANON EUROPA N.V           \u2502     0.00 \u2502  0.000000 \u2502 LEE  RICKLER**SIMON  PARKER**\u2026 \u2502 G06F                           \u2502\n\u2502     15042 \u2502    4333661 \u2502 CANON EUROPA         \u2502 * CANON EUROPA N.V.          \u2502     0.00 \u2502  0.000000 \u2502 QI HE  HONG**ADAM MICHAEL  BA\u2026 \u2502 G06T**G01B                     \u2502\n\u2502     15043 \u2502    4333661 \u2502 CANON EUROPA         \u2502 * CANON EUROPA NV            \u2502     0.00 \u2502  0.000000 \u2502 NILESH  PATHAK**MASAMICHI  MA\u2026 \u2502 H04B**G06T**G06F**H04M**H04N*\u2026 \u2502\n\u2502     25387 \u2502    7650783 \u2502 DSM                  \u2502 * DSM N.V.                   \u2502     0.00 \u2502  0.000000 \u2502 GABRIEL MARINUS  MEESTERS**RU\u2026 \u2502 C12N**A61K**A23L**A23J**A23K*\u2026 \u2502\n\u2502         \u2026 \u2502          \u2026 \u2502 \u2026                    \u2502 \u2026                            \u2502        \u2026 \u2502         \u2026 \u2502 \u2026                              \u2502 \u2026                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/fs/","title":"Fellegi-Sunter Model","text":"<p>See the Fellegi-Sunter Concept guide for background info.</p>"},{"location":"reference/fs/#mismo.fs.Weights","title":"<code>mismo.fs.Weights</code>","text":"<p>Weights for the Fellegi-Sunter model.</p> <p>An unordered, dict-like collection of ComparisonWeights, one for each Comparison of the same name.</p>"},{"location":"reference/fs/#mismo.fs.Weights.__getitem__","title":"<code>__getitem__(name: str) -&gt; ComparisonWeights</code>","text":"<p>Get a <code>ComparisonWeights</code> by name.</p>"},{"location":"reference/fs/#mismo.fs.Weights.__init__","title":"<code>__init__(comparison_weights: Iterable[ComparisonWeights])</code>","text":"<p>Create a new Weights object.</p>"},{"location":"reference/fs/#mismo.fs.Weights.__iter__","title":"<code>__iter__() -&gt; Iterator[ComparisonWeights]</code>","text":"<p>Iterate over the contained <code>ComparisonWeights</code>.</p>"},{"location":"reference/fs/#mismo.fs.Weights.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>The number of <code>ComparisonWeights</code>.</p>"},{"location":"reference/fs/#mismo.fs.Weights.from_json","title":"<code>from_json(json: dict | str | Path) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Create a Weights object from a JSON-serializable representation.</p> PARAMETER  DESCRIPTION <code>json</code> <p>If a dict, assumed to be the JSON-serializable representation. Load it directly. If a str or Path, assumed to be a path to a JSON file. Load it from that file.</p> <p> TYPE: <code>dict | str | Path</code> </p> RETURNS DESCRIPTION <code>Weights</code> <p>The Weights object created from the JSON-serializable representation.</p>"},{"location":"reference/fs/#mismo.fs.Weights.plot","title":"<code>plot() -&gt; alt.Chart</code>","text":"<p>Plot the weights for all of the Comparisons.</p>"},{"location":"reference/fs/#mismo.fs.Weights.score","title":"<code>score(compared: Table) -&gt; Table</code>","text":"<p>Score each already-compared record pair.</p> <p>For each Comparison, we add a column, <code>{comparison.name}_odds</code>. This is a number that describes how this comparison affects the likelihood of a match. For example, an odds of 10 means that this comparison increased the likelihood of a match by 10x as compared to if we hadn't looked at this comparison. For example, the column might be called \"name_odds\" and have values like 10, 0.1, 1.</p> <p>In addition to these per-Comparison columns, we also add a column called \"odds\" which is the overall odds for each record pair. We calculate this by starting with the odds of 1 and then multiplying by each Comparison's odds to get the overall odds.</p>"},{"location":"reference/fs/#mismo.fs.Weights.to_json","title":"<code>to_json(path: str | Path | None = None) -&gt; dict</code>","text":"<p>Return a JSON-serializable representation of the weights.</p> <p>If <code>path</code> is given, write the dict to the file at that path in addition to returning it.</p>"},{"location":"reference/fs/#mismo.fs.ComparisonWeights","title":"<code>mismo.fs.ComparisonWeights</code>","text":"<p>The weights for a single Comparison.</p> <p>An ordered, dict-like collection of LevelWeights one for each level.</p>"},{"location":"reference/fs/#mismo.fs.ComparisonWeights.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>The name of the Comparison that these weights are for, eg \"name\" or \"address\".</p>"},{"location":"reference/fs/#mismo.fs.ComparisonWeights.__contains__","title":"<code>__contains__(name_or_index: str | int) -&gt; bool</code>","text":"<p>Check if a LevelWeights is present by name or index.</p>"},{"location":"reference/fs/#mismo.fs.ComparisonWeights.__getitem__","title":"<code>__getitem__(name_or_index: str | int | slice) -&gt; LevelWeights | tuple[LevelWeights, ...]</code>","text":"<p>Get a LevelWeights by name or index.</p>"},{"location":"reference/fs/#mismo.fs.ComparisonWeights.__init__","title":"<code>__init__(name: str, level_weights: Iterable[LevelWeights])</code>","text":"<p>Create a new ComparisonWeights object.</p>"},{"location":"reference/fs/#mismo.fs.ComparisonWeights.__iter__","title":"<code>__iter__() -&gt; Iterator[LevelWeights]</code>","text":"<p>Iterate over the LevelWeights, including the implicit ELSE level.</p>"},{"location":"reference/fs/#mismo.fs.ComparisonWeights.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>The number of LevelWeights, including the implicit ELSE level.</p>"},{"location":"reference/fs/#mismo.fs.ComparisonWeights.log_odds","title":"<code>log_odds(labels: str | int | StringValue | IntegerValue) -&gt; float | FloatingValue</code>","text":"<p>Calculate the log odds for each record pair.</p>"},{"location":"reference/fs/#mismo.fs.ComparisonWeights.match_probability","title":"<code>match_probability(labels: str | int | StringValue | IntegerValue) -&gt; float | FloatingValue</code>","text":"<p>Calculate the match probability for each record pair.</p>"},{"location":"reference/fs/#mismo.fs.ComparisonWeights.odds","title":"<code>odds(labels: str | int | StringValue | IntegerValue) -&gt; float | FloatingValue</code>","text":"<p>Calculate the odds for each record pair.</p> <p>If <code>labels</code> is a string or integer, then we calculate the odds for that level. For example, if <code>labels</code> is \"close\", then we calculate the odds for the \"close\" level. If <code>labels</code> is 0, then we calculate the odds for the first level. If <code>labels</code> is -1, then we calculate the odds for the last level (the ELSE level).</p> <p>If <code>labels</code> is a StringValue or IntegerValue, then we do the same thing, except that we return an ibis FloatingValue instead of a python float.</p>"},{"location":"reference/fs/#mismo.fs.ComparisonWeights.plot","title":"<code>plot() -&gt; alt.Chart</code>  <code>staticmethod</code>","text":"<p>Plot the weights for this comparison.</p>"},{"location":"reference/fs/#mismo.fs.LevelWeights","title":"<code>mismo.fs.LevelWeights</code>","text":"<p>Weights for a single ComparisonLevel.</p> <p>This describes for example \"If zipcodes match perfectly, then this increases the probability of a match by 10x as compared to if we hadn't looked at zipcode\".</p>"},{"location":"reference/fs/#mismo.fs.LevelWeights.log_odds","title":"<code>log_odds: float</code>  <code>property</code>","text":"<p>The log base 10 of the odds.</p>"},{"location":"reference/fs/#mismo.fs.LevelWeights.m","title":"<code>m: float</code>  <code>property</code>","text":"<p>Among true-matches, what proportion of them have this level?</p> <p>1 means this level is a good indication of a match, 0 means it's a good indication of a non-match.</p>"},{"location":"reference/fs/#mismo.fs.LevelWeights.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>The name of the level, e.g. \"Exact Match\".</p>"},{"location":"reference/fs/#mismo.fs.LevelWeights.odds","title":"<code>odds: float</code>  <code>property</code>","text":"<p>How much more likely is a match than a non-match at this level?</p> <p>This is derived from m and u. This is the same thing as \"Bayes Factor\" in splink.</p> <ul> <li>values below 1 is evidence against a match</li> <li>values above 1 is evidence for a match</li> <li>1 means this level does not provide any evidence for or against a match</li> </ul>"},{"location":"reference/fs/#mismo.fs.LevelWeights.u","title":"<code>u: float</code>  <code>property</code>","text":"<p>Among non-matches, what proportion of them have this level?</p> <p>1 means this level is a good indication of a non-match, 0 means it's a good indication of a match.</p>"},{"location":"reference/fs/#mismo.fs.LevelWeights.__init__","title":"<code>__init__(name: str, *, m: float, u: float) -&gt; None</code>","text":"<p>Create a new LevelWeights object.</p>"},{"location":"reference/fs/#mismo.fs.train_comparison_using_labels","title":"<code>mismo.fs.train_comparison_using_labels(comparison: Comparison, left: Table, right: Table, *, max_pairs: int | None = None, seed: int | None = None) -&gt; ComparisonWeights</code>","text":"<p>Estimate the weights for a single Comparison using labeled data.</p>"},{"location":"reference/fs/#mismo.fs.train_comparisons_using_labels","title":"<code>mismo.fs.train_comparisons_using_labels(comparisons: Comparisons, left: Table, right: Table, *, max_pairs: int | None = None, seed: int | None = None) -&gt; Weights</code>","text":"<p>Estimate all Weights for a set of Comparisons using labeled data.</p>"},{"location":"reference/fs/#mismo.fs.train_comparisons_using_em","title":"<code>mismo.fs.train_comparisons_using_em(comparisons: Comparisons, left: Table, right: Table, *, max_pairs: int | None = None, seed: int | None = None) -&gt; Weights</code>","text":"<p>Train weights on unlabeled data using an expectation maximization algorithm.</p>"},{"location":"reference/fs/#mismo.fs.plot_weights","title":"<code>mismo.fs.plot_weights(weights: ComparisonWeights | Iterable[ComparisonWeights]) -&gt; alt.Chart</code>","text":"<p>Plot the weights for a comparison or comparisons.</p> <p>Use this to - See which levels are common and which are rare.   If all pairs are getting matched by only one level, you probably   want to adjust the conditions so that pairs are more evenly distributed.   For example, if you have an \"exact match\" level that hardly is ever used,   that could be an indication that your condition is too strict and you should   relax it. - See the odds for each level.   If the odds for a \"exact match\" level are lower than you expect, perhaps   near 1, that could be an indication that your condition is too loose and   there are many non-matches sneaking into that level. You should inspect   those pairs and figure out how to tighted the condition so   that only matches are in that level.</p> PARAMETER  DESCRIPTION <code>weights</code> <p>The weights to plot.</p> <p> TYPE: <code>ComparisonWeights | Iterable[ComparisonWeights]</code> </p> RETURNS DESCRIPTION <code>Chart</code> <p>The plot.</p>"},{"location":"reference/metrics/","title":"Metrics API","text":"<p>Utilities for assessing the quality of a linkage result.</p>"},{"location":"reference/metrics/#mismo.metrics.n_naive_comparisons","title":"<code>mismo.metrics.n_naive_comparisons(left: Sizable, right: Sizable | None = None) -&gt; int</code>","text":"<p>The number of comparisons if we compared every record to every other record.</p> PARAMETER  DESCRIPTION <code>left</code> <p>The number of records in the left dataset, or the left dataset itself.</p> <p> TYPE: <code>int | Sized | Table</code> </p> <code>right</code> <p>The number of records in the right dataset, or the right dataset itself. For dedupe tasks leave this as None.</p> <p> TYPE: <code>int | Sized | Table</code> DEFAULT: <code>None</code> </p>"},{"location":"reference/metrics/#mismo.metrics.mutual_info_score","title":"<code>mismo.metrics.mutual_info_score = _wrap(_metrics.mutual_info_score)</code>  <code>module-attribute</code>","text":""},{"location":"reference/metrics/#mismo.metrics.adjusted_mutual_info_score","title":"<code>mismo.metrics.adjusted_mutual_info_score = _wrap(_metrics.adjusted_mutual_info_score)</code>  <code>module-attribute</code>","text":""},{"location":"reference/metrics/#mismo.metrics.normalized_mutual_info_score","title":"<code>mismo.metrics.normalized_mutual_info_score = _wrap(_metrics.normalized_mutual_info_score)</code>  <code>module-attribute</code>","text":""},{"location":"reference/metrics/#mismo.metrics.rand_score","title":"<code>mismo.metrics.rand_score = _wrap(_metrics.rand_score)</code>  <code>module-attribute</code>","text":""},{"location":"reference/metrics/#mismo.metrics.adjusted_rand_score","title":"<code>mismo.metrics.adjusted_rand_score = _wrap(_metrics.adjusted_rand_score)</code>  <code>module-attribute</code>","text":""},{"location":"reference/metrics/#mismo.metrics.fowlkes_mallows_score","title":"<code>mismo.metrics.fowlkes_mallows_score = _wrap(_metrics.fowlkes_mallows_score)</code>  <code>module-attribute</code>","text":""},{"location":"reference/metrics/#mismo.metrics.homogeneity_score","title":"<code>mismo.metrics.homogeneity_score = _wrap(_metrics.homogeneity_score)</code>  <code>module-attribute</code>","text":""},{"location":"reference/metrics/#mismo.metrics.completeness_score","title":"<code>mismo.metrics.completeness_score = _wrap(_metrics.completeness_score)</code>  <code>module-attribute</code>","text":""},{"location":"reference/metrics/#mismo.metrics.v_measure_score","title":"<code>mismo.metrics.v_measure_score = _wrap(_metrics.v_measure_score)</code>  <code>module-attribute</code>","text":""},{"location":"reference/metrics/#mismo.metrics.homogeneity_completeness_v_measure","title":"<code>mismo.metrics.homogeneity_completeness_v_measure = _wrap(_metrics.homogeneity_completeness_v_measure)</code>  <code>module-attribute</code>","text":""},{"location":"reference/plot/","title":"Plotting API","text":"<p>Plot and visualize the results of record linkage. Contains ways to view the performance of the blocking, comparing, and clustering phases.</p>"},{"location":"reference/plot/#mismo.plot.distribution_chart","title":"<code>mismo.plot.distribution_chart(vals: Column, *, limit: int | None = None) -&gt; alt.Chart</code>","text":"<p>Make a Altair histogram of values.</p> <p>Useful as an exploratory tool to look at what values are present in a column.</p> PARAMETER  DESCRIPTION <code>vals</code> <p>The values to plot.</p> <p> TYPE: <code>ColumnExpr</code> </p> <code>limit</code> <p>The maximum number of bars to plot, by default 1000</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Chart</code> <p>The histogram.</p>"},{"location":"reference/plot/#mismo.plot.distribution_dashboard","title":"<code>mismo.plot.distribution_dashboard(records: Table, *, column: str | None = None, limit: int | None = None) -&gt; solara.Element</code>","text":"<p>Make a solara dashboard for exploring the distribution of values in a table.</p> PARAMETER  DESCRIPTION <code>records</code> <p>The table to plot.</p> <p> TYPE: <code>Table</code> </p> <code>column</code> <p>The initial column to plot. If None, the first column is used. You can change this interactively in the returned dashboard.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>The initial maximum number of values to plot, by default 100. You can change this interactively in the returned dashboard.</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Element</code> <p>The dashboard.</p>"},{"location":"reference/plot/#mismo.plot.plot_cluster","title":"<code>mismo.plot.plot_cluster(nodes: Table, edges: Table) -&gt; alt.Chart</code>","text":"<p>Plot a cluster of records and the links between them.</p> PARAMETER  DESCRIPTION <code>nodes</code> <p>A table of records with at least columns (record_id, label_true) and optionally other columns.</p> <p> TYPE: <code>Table</code> </p> <code>edges</code> <p>A table of edges with at least columns (record_id_l, record_id_r, dissimilarity) and optionally other columns. Dissimilarity is like distance. See https://scikit-learn.org/stable/modules/generated/sklearn.manifold.MDS.html</p> <p> TYPE: <code>Table</code> </p> RETURNS DESCRIPTION <code>chart</code> <p>An Altair chart that can be displayed in a notebook or saved to a file.</p> <p> TYPE: <code>Chart</code> </p>"}]}